<?php

/**
 * @file
 * Install, update, and uninstall functions for the wikicompare module.
 */



/**
 * Implements hook_schema()
 * This hook allow us to create some table in database.
 */
function wikicompare_schema() {

  //Create cache table for the comparative_table computation, so percent and css_class are computed at each change on feature/compared/implementation and not at each read of the comparative table.
  $schema['cache_comparative_table'] = array(

    'description' => 'Cache table for comparative table',
    'fields' => array(
      'nid' => array(
        'description' => 'The nid of the implementation node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'percent' => array(
        'description' => 'The percentage returned by the node',
        'type' => 'float',
        'default' => 0,
      ),
      'css_class' => array(
        'description' => 'The css class returned by the node',
        'type' => 'varchar',
        'length' => 32,
        'default' => '',
      ),
    ),
    'primary key' =>  array('nid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    )

  );

  /**
   * Create cache tables for feature, compared and implementation records.
   * Theses tables will contains the needed data for the comparative table computation, one line for each record and with the data of the most recent published version.
   * This will allow us to make far less join in sql query on comparative table computation.
   */
  foreach (array('compared', 'feature', 'implementation') as $type) {
    $schema['cache_' . $type] = wikicompare_node_schema($type);
  }

  return $schema;

}

/** 
 * Generic function to create table for each node type.
 */
function wikicompare_node_schema($type) {

  $schema = array();
  $schema['description'] = 'Cache table for ' . $type . '. Used so the percentage of comparative table are computed faster.';
  $schema['fields']['nid'] = array(
    'description' => 'The nid of the node',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  );
  $schema['primary key'] = array('nid');
  $schema['foreign keys']['node'] = array(
    'table' => 'node',
    'columns' => array('nid' => 'nid'),
  );

  $schema['fields']['vid'] = array(
    'description' => 'The active vid of the node',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
  );
  $schema['foreign keys']['node_revision'] = array(
    'table' => 'node',
    'columns' => array('vid' => 'vid'),
  );

  if ($type != 'implementation') {
    $schema['fields']['title'] = array(
      'description' => 'The title of the node',
      'type' => 'varchar',
      'length' => 256,
      'not null' => TRUE,
    );
    $schema['fields']['parent_id'] = array(
      'description' => 'The parent id of the node',
      'type' => 'int',
      'unsigned' => TRUE,
    );
    $schema['indexes']['parent_id'] = array('parent_id');
    $schema['foreign keys']['node_parent'] = array(
      'table' => 'node',
      'columns' => array('parent_feature_id' => 'nid'),
    );
    $schema['fields']['sequence'] = array(
      'description' => 'The sequence of the node',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    );
    $schema['indexes']['sequence'] = array('sequence');
    $schema['fields']['state'] = array(
      'description' => 'The state of the node',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
    );
    $schema['indexes']['state'] = array('state');
    $schema['fields']['has_children'] = array(
      'description' => "Boolean indicated if this node has children. This allow us to know this feature has children without making each time a big sql query.",
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    );
  } else {
    $schema['fields']['feature_id'] = array(
      'description' => 'The feature id of the implementation node',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    );
    $schema['fields']['compared_id'] = array(
      'description' => 'The compared id of the implementation node',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    );

  }

  switch ($type) {
    //Feature specific fields.
    case 'feature':
      $schema['fields']['type'] = array(
        'description' => 'The type of the feature node',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      );
      $schema['indexes']['type'] = array('type');
      $schema['fields']['weight'] = array(
        'description' => 'The weight of the feature node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      );
      break;
    case 'implementation':
      $schema['fields']['support'] = array(
        'description' => "Boolean indicated if this implementation is supported or not",
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      );
      break;
  }

  $schema['fields']['to_update'] = array(
    'description' => "Boolean indicated if this node should be updated as soon as possible",
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['indexes']['to_update'] = array('to_update');

  return $schema;

}


/**
 * Implements hook_install().
 * This function is called only once at the module installation.
 */
function wikicompare_install() {

  $t = get_t();

  // Ensure that new node types is available.
  node_types_rebuild();

  //Create the body field. We can't use the drupal function because we want a description without summary field.
  $field = field_info_field('body');
  if (empty($field)) {
    $field = array(
      'field_name' => 'body',
      'type' => 'text_with_summary',
      'entity_types' => array('node'),
    );
    field_create_field($field);
  }

  //Create wikicompare fields.
  $field = array(
    'field_name' => 'wikicompare_parent_id',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared', 'feature', 'need')),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_sequence',
    'type' => 'number_integer',
    'cardinality' => 1,
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_feature_id',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('feature')),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_compared_id',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared')),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_support',
    'type' => 'list_boolean',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        0 => 'Unsupported',
        1 => 'Supported',
      ),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_protected',
    'type' => 'list_boolean',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        0 => 'Unprotected',
        1 => 'Protected',
      ),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_proofs',
    'type' => 'text',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'max_length' => '255',
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_type',
    'type' => 'list_text',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        'parent-weighted-average' => 'Parent Feature - Weighted Average',
        'parent-highest-percentage' => 'Parent Feature - Highest Percentage',
      ),
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_guidelines',
    'type' => 'text_with_summary',
    'cardinality' => 1
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_weight',
    'type' => 'number_integer',
    'cardinality' => 1
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_user_ids',
    'type' => 'entityreference',
    'cardinality' => -1,
    'settings' => array(
      'target_type' => 'user',
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_user_from_parent_ids',
    'type' => 'entityreference',
    'cardinality' => -1,
    'settings' => array(
      'target_type' => 'user',
    ),
  );
  field_create_field($field);

  $field = array(
    'field_name' => 'wikicompare_state',
    'type' => 'list_text',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => unserialize(WIKICOMPARE_STATE_OPTIONS)
    ),
  );
  field_create_field($field);

  foreach (array('compared', 'feature', 'implementation') as $type) {
    //Generic function.
    wikicompare_node_install($type);
  }

  //Set module default settings.
  variable_set('wikicompare_update_compared', 'no-update');
  variable_set('wikicompare_cache_status', 1);

  variable_set('revisioning_edit_callback', 1);

  //Create wikicompare specific role.
  foreach (array('wikicompare_admin', 'moderator') as $name) {
    $role = new stdClass();
    $role->name = $name;
    user_role_save($role);
  }

  //Assign permission to role.
  foreach (array('wikicompare_admin', 'moderator', 'authenticated user') as $role_name) {

    //Permissions for all users.
    $permissions = array(
      'access comments' => TRUE,
      'post comments' => TRUE,
      'skip comment approval' => TRUE,
      'edit own comments' => TRUE,
      'access content' => TRUE,
      'view revisions' => TRUE,
      'revert revisions' => TRUE,
      'create feature content' => TRUE,
      'edit any feature content' => TRUE,
      'delete own feature content' => TRUE,
      'create compared content' => TRUE,
      'edit any compared content' => TRUE,
      'delete own compared content' => TRUE,
      'edit revisions' => TRUE,
      'view revisions of any feature content' => TRUE,
      'publish revisions of any feature content' => TRUE,
      'view revisions of any compared content' => TRUE,
      'publish revisions of any compared content' => TRUE,
      'view revisions of any implementation content' => TRUE,
      'publish revisions of any implementation content' => TRUE,
      'access user profiles' => TRUE,
      'change own username' => TRUE,
      'cancel account' => TRUE,
    );

    //Permissions for moderators.
    if ($role_name != 'authenticated user') {
      $permissions = array_merge($permissions, array(
        'administer comments' => TRUE,
        'delete revisions' => TRUE,
        'delete any feature content' => TRUE,
        'delete any compared content' => TRUE,
        'access site in maintenance mode' => TRUE,
        'administer users' => TRUE,
        'moderate wikicompare' => TRUE,
      ));
    }

    //Permissions for wikicompare administrator.
    if ($role_name == 'wikicompare_admin') {
      $permissions = array_merge($permissions, array(
        'administer wikicompare' => TRUE,
      ));
    }

    //Assign prepared permissions.
    $role = user_role_load_by_name($role_name);
    $rid = $role->rid;
    user_role_change_permissions($rid, $permissions);

  }

  //Create a text format specific to wikicompare.
  $wikicompare_text_format = array(
    'format' => 'wikicompare_text_format',
    'name' => 'Wikicompare text format',
    'weight' => 8,
    'filters' => array(

      'filter_html' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(
          //Filter html tag with a white list.
          'allowed_html' => '<a> <em> <strong> <u> <s> <img> <cite> <blockquote> <caption> <code> <ul> <ol> <li> <dl> <dt> <dd> <sub> <sup> <table> <tbody> <tr> <td> <hr>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        ),
      ),
      // URL filter.
      'filter_url' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        )
      ),

    ),
  );
  $wikicompare_text_format = (object) $wikicompare_text_format;
  filter_format_save($wikicompare_text_format);

  //Set the format by default to the wikicompare format.
  variable_set('filter_fallback_format', $wikicompare_text_format->format);

  //Create a specific ckeditor format for wikicompare.
  db_insert('ckeditor_input_format')->fields(array("name" => "Wikicompare", "format" => $wikicompare_text_format->format))->execute();
  //insert settings for default role
  $arr = array();
  $arr['filebrowser'] = 'none';
  $arr['quickupload'] = 'f';
  //security
  $arr['ss'] = "2";
  $arr['filters']['filter_html'] = 1;
  //appearance
  $arr['default'] = "t";
  $arr['show_toggle'] = "f";
  $arr['popup'] = variable_get('ckeditor_popup', 0) ? "t" : "f";
  $arr['toolbar'] = "
[
    ['Source'],
    ['PasteText','PasteFromWord','SpellChecker', 'Scayt'],
    ['Undo','Redo','Find','Replace'],
    ['Image','Media','Flash','Table','HorizontalRule','Smiley','SpecialChar'],
    ['Maximize'],
    '/',
    ['Format', 'Styles', 'Font', 'FontSize', 'TextColor', 'BGColor'],
    '/',
    ['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],
    ['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],
    ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],
    ['Link','Unlink','Anchor', 'Linkit']
]
    ";
  $arr['expand'] = variable_get('ckeditor_toolbar_start_expanded', 1) ? "t" : "f";
  $arr['width'] = variable_get("ckeditor_width", "100%");
  $arr['lang'] = "en";
  $arr['auto_lang'] = "t";
  $arr['language_direction'] = "default";
  //output
  $arr['enter_mode'] = "p";
  $arr['shift_enter_mode'] = "br";
  $arr['font_format'] = 'p;div;pre;address;h1;h2;h3;h4;h5;h6';
  $arr['format_source'] = "t";
  $arr['format_output'] = "t";
  $arr['custom_formatting'] = "f";
  $arr['formatting']['custom_formatting_options'] = array('indent' => 'indent', 'breakBeforeOpen' => 'breakBeforeOpen', 'breakAfterOpen' => 'breakAfterOpen', 'breakAfterClose' => 'breakAfterClose');
  //css
  $arr['css_mode'] = "none";
  $arr['css_path'] = variable_get("ckeditor_stylesheet", "");
  //upload
  //get permissions here like in _update_role_permissions
  $arr['filebrowser'] = "imce";
  $arr['user_choose'] = "f";
  $arr['ckeditor_load_method'] = "ckeditor.js";
  $arr['ckeditor_load_time_out'] = 0;
  $arr['scayt_autoStartup'] = "f";
  //advanced options
  $arr['html_entities'] = "f";
  db_insert('ckeditor_settings')->fields(array("name" => "Wikicompare", "settings" => serialize($arr)))->execute();

  //Create IMCE profile for wikicompare.
  require_once drupal_get_path('module', 'imce') . '/inc/imce.core.profiles.inc';
  $imce_profiles = variable_get('imce_profiles', array());
  $imce_profiles['wikicompare_user'] = imce_construct_profile('Wikicompare User', 1, 1, 2, 0, 'gif png jpg jpeg', '1200x1200', 1, array(array('users/%uid', 1, 1, 1, 1, 1, 1), array('users', 1, 1, 0, 0, 0, 0)), array(array('Small', '90x90', 'small_', ''), array('Medium', '120x120', 'medium_', ''), array('Large', '180x180', 'large_', '')));
  $imce_profiles['wikicompare_admin'] = imce_construct_profile('Wikicompare Admin', 1, 0, 0, 0, '*', '1200x1200', 10, array(array('users', 1, 1, 1, 1, 1, 1)), array(array('Small', '90x90', 'small_', ''), array('Medium', '120x120', 'medium_', ''), array('Large', '180x180', 'large_', '')));
  variable_set('imce_profiles', $imce_profiles);
  variable_set('imce_roles_profiles', array(
    user_role_load_by_name('wikicompare_admin')->rid => array(
      'weight' => 0,
      'public_pid' => 'wikicompare_admin',
    ),
    user_role_load_by_name('moderator')->rid => array(
      'weight' => 0,
      'public_pid' => 'wikicompare_admin',
    ),
    2 => array(
      'weight' => 11,
      'public_pid' => 'wikicompare_user',
    ),
    1 => array(
      'weight' => 12,
      'public_pid' => 'wikicompare_user',
    )));
  variable_set('imce_settings_replace', 2);

}



/** 
 * Generic function to create table for each node type.
 *
 * @param $type
 *   The type of the nodes.
 */
function wikicompare_node_install($type) {

  $t = get_t();

  //Set variables
  variable_set('node_options_' . $type, array('status','revision','revision_moderation'));
  variable_set('node_submitted_' . $type, '0');
  variable_set('language_content_type_' . $type, 0);
  variable_set('new_revisions_' . $type, 1);

  variable_set('comment_anonymous_' . $type, 0);
  variable_set('comment_' . $type, 2);
  variable_set('comment_default_mode_' . $type, 0);
  variable_set('comment_default_per_page_' . $type, 10);
  variable_set('comment_form_location_' . $type, 1);
  variable_set('comment_preview_' . $type, 1);
  variable_set('comment_subject_field_' . $type, 0);

  /* We can't use this settings because of a missing hook in revisioning. See wikicompare.module for more explanation.
  variable_set('revisioning_auto_publish_' . $type, 1);
  */

  //Create description field. Code from node_add_body_field() function, we can't use it because we want to disable summary.
  $instance = array(
    'field_name' => 'body',
    'entity_type' => 'node',
    'bundle' => $type,
    'label' => 'Description',
    'widget' => array('type' => 'text_textarea_with_summary'),
    'settings' => array('display_summary' => FALSE),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'text_default',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'text_summary_or_trimmed',
      ),
    ),
  );
  field_create_instance($instance);
  
  //Assign wikicompare fields to node types.
  if ($type != 'implementation') {
    $instance = array(
      'field_name' => 'wikicompare_parent_id',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => 'Parent',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array($type)),
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_sequence',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => 'Sequence',
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'widget' => array(
        'type' => 'number',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_state',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => 'State',
      'description' => 'TODO',
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 'new',
        ),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_user_ids',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => 'Power users',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'target_type' => 'user',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_user_from_parent_ids',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => 'Power users from parents',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'target_type' => 'user',

      ),
    );
    field_create_instance($instance);


  } else {

    $instance = array(
      'field_name' => 'wikicompare_feature_id',
      'entity_type' => 'node',
      'bundle' => 'implementation',
      'label' => 'Feature',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'required' => 1,
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('feature')),
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_compared_id',
      'entity_type' => 'node',
      'bundle' => 'implementation',
      'label' => 'Compared',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'required' => 1,
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('compared')),
      ),
    );
    field_create_instance($instance);



    $instance = array(
      'field_name' => 'wikicompare_support',
      'entity_type' => 'node',
      'bundle' => 'implementation',
      'label' => 'Support',
      'default_value' => array(
        0 => array(
          'value' => 0,
        ),
      ),
      'widget' => array(
        'type' => 'options_onoff',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_protected',
      'entity_type' => 'node',
      'bundle' => 'implementation',
      'label' => 'Protected?',
      'default_value' => array(
        0 => array(
          'value' => 0,
        ),
      ),
      'widget' => array(
        'type' => 'options_onoff',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_proofs',
      'entity_type' => 'node',
      'bundle' => 'implementation',
      'label' => 'Proofs',
      'widget' => array(
        'settings' => array(
          'size' => '255',
        ),
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);

  }

  if ($type == 'feature') {

    $instance = array(
      'field_name' => 'wikicompare_type',
      'entity_type' => 'node',
      'bundle' => 'feature',
      'label' => 'Type',
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 'parent-weighted-average',
        ),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_guidelines',
      'entity_type' => 'node',
      'bundle' => 'feature',
      'label' => 'Validation Guidelines',
      'widget' => array('type' => 'text_textarea_with_summary'),
      'settings' => array('display_summary' => FALSE),
      'widget' => array(
        'type' => 'text_textarea',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
        ),
      ),
    );
    field_create_instance($instance);

    $instance = array(
      'field_name' => 'wikicompare_weight',
      'entity_type' => 'node',
      'bundle' => 'feature',
      'label' => 'Weight',
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'widget' => array(
        'type' => 'number',
      ),
    );
    field_create_instance($instance);

  }

}



/**
 * Implements hook_uninstall().
 * This function is called at the module uninstallation.
 */
function wikicompare_uninstall() {

  //Delete module settings variable
  variable_del('wikicompare_update_compared');
  variable_del('wikicompare_cache_status');

  //Delete all nodes of feature type.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'feature'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);

  //Delete all nodes of compared type.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'compared'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);


  //Delete all nodes of implementation type.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'implementation'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);

  //Purge variables.
  foreach (array('compared', 'feature', 'implementation') as $type) {

    variable_del('node_options_' . $type);
    variable_del('node_submitted_' . $type);
    variable_del('language_content_type_' . $type);
    variable_del('new_revisions_' . $type);

    variable_del('comment_anonymous_' . $type);
    variable_del('comment_' . $type);
    variable_del('comment_default_mode_' . $type);
    variable_del('comment_default_per_page_' . $type);
    variable_del('comment_form_location_' . $type);
    variable_del('comment_preview_' . $type);
    variable_del('comment_subject_field_' . $type);

    /* We can't use this settings because of a missing hook in revisioning. See wikicompare.module for more explanation.
    variable_del('revisioning_auto_publish_' . $type);
    */

  }

  //Delete fields.
  field_delete_field('wikicompare_parent_id');
  field_delete_field('wikicompare_user_ids');
  field_delete_field('wikicompare_user_from_parent_ids');
  field_delete_field('wikicompare_type');
  field_delete_field('wikicompare_guidelines');
  field_delete_field('wikicompare_weight');
  field_delete_field('wikicompare_sequence');
  field_delete_field('wikicompare_state');
  field_delete_field('wikicompare_feature_id');
  field_delete_field('wikicompare_compared_id'); 
  field_delete_field('wikicompare_support');
  field_delete_field('wikicompare_protected');
  field_delete_field('wikicompare_proofs');

  field_delete_instance(field_read_instance('node', 'body', 'compared'));
  field_delete_instance(field_read_instance('node', 'body', 'feature'));
  field_delete_instance(field_read_instance('node', 'body', 'implementation'));
  field_delete_instance(field_read_instance('comment', 'comment_body', 'comment_node_compared'));
  field_delete_instance(field_read_instance('comment', 'comment_body', 'comment_node_feature'));
  field_delete_instance(field_read_instance('comment', 'comment_body', 'comment_node_implementation'));

  //Remove wikicompare text format.
  filter_format_disable('wikicompare_text_format');
  db_delete('filter')
    ->condition('format', 'wikicompare_text_format')
    ->execute();
  db_delete('filter_format')
    ->condition('format', 'wikicompare_text_format')
    ->execute();

  //Remove wikicompare ckeditor format.
  db_delete('ckeditor_input_format')
    ->condition('name', 'Wikicompare')
    ->execute();
  db_delete('ckeditor_settings')
    ->condition('name', 'Wikicompare')
    ->execute();

  //Remove wikicompare imce profile.
  $imce_profiles = variable_get('imce_profiles', array());
  unset($imce_profiles['wikicompare_user']);
  unset($imce_profiles['wikicompare_admin']);
  variable_set('imce_profiles', $imce_profiles);
  variable_del('imce_roles_profiles');

  //Delete role.
  user_role_delete('wikicompare_admin');
  user_role_delete('moderator');


  // Purge all field information
  // api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
  drupal_flush_all_caches();

}

?>
