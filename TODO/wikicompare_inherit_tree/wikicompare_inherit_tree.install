<?php

/**
 * @file
 * Install, update, and uninstall functions for the wikicompare_inherit_tree module.
 */



/**
 * Implements hook_schema()
 * This hook allow us to create some table in database
 */
function wikicompare_inherit_schema() {

  //Create cache table for the inherit tree, similar to the comparative_table of the main module. His role is to compute percent and css_class at each change on feature/compared/evaluation and not at each read of the comparative table.
  $schema['cache_inherit_tree'] = array(

    'description' => 'Cache table for inherit tree',
    'fields' => array(
      'inherit_tree_feature_id' => array(
        'description' => 'The nid of the feature which declare the tree inheritance',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'feature_id' => array(
        'description' => 'The nid of the feature node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'compared_id' => array(
        'description' => 'The nid of the compared node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'percent' => array(
        'description' => 'The percentage returned by the node',
        'type' => 'float',
        'default' => 0,
      ),
      'css_class' => array(
        'description' => 'The css class returned by the node',
        'type' => 'varchar',
        'length' => 32,
        'default' => '',
      ),
    ),
//TODO make unique by inherit_tree_feature_id/feature_id/compared_id
    'unique keys' => array(
      'nid' => array('nid'),
    ),
    'foreign keys' => array(
      'inherit_tree_feature_id' => array(
        'table' => 'node',
        'columns' => array('inherit_tree_feature_id' => 'nid'),
      ),
      'feature_id' => array(
        'table' => 'node',
        'columns' => array('feature_id' => 'nid'),
      ),
      'compared_id' => array(
        'table' => 'node',
        'columns' => array('compared_id' => 'nid'),
      ),

    )

  );

}

/**
 * Implements hook_schema_alter()
 * This hook allow us to modify some table in database
 */
function wikicompare_inherit_tree_schema_alter(&$schema) {
  
  $schema['cache_feature']['fields']['inherit_tree_id'] = array(
      'description' => 'The feature id at the top of the inherited tree',
      'type' => 'int',
      'unsigned' => TRUE,
  );
  $schema['cache_feature']['indexes']['inherit_tree_id'] = array('inherit_tree_id');
  $schema['cache_feature']['foreign keys']['inherit_tree'] = array(
    'table' => 'node',
    'columns' => array('inherit_tree_id' => 'nid'),
  );


}



/**
 * Implements hook_install().
 * This function is called only once at the module installation
 */
function wikicompare_inherit_tree_install() {

  $t = get_t();

  // Ensure that new node type is available.
  node_types_rebuild();
  



  /*
   * Create inherit tree field
   */ 


  $schema = drupal_get_schema('cache_feature');
  db_add_field('cache_feature', 'inherit_tree_id', $schema['fields']['inherit_tree_id']);
  db_add_index('cache_feature', 'inherit_tree_id', array('inherit_tree_id'));



  $field = array(
    'field_name' => 'feature_inherit_tree',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('feature')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'feature_inherit_tree',
    'entity_type' => 'node',
    'bundle' => 'feature',
    'label' => 'Inherit Tree',
    'description' => 'TODO',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('feature')),
    ),
  );
  field_create_instance($instance);



//TODO Put a filter in the feature interface based on this field
  $field = array(
    'field_name' => 'feature_inherit_tree_top_compared',
    'type' => 'entityreference',
    'cardinality' => -1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'feature_inherit_tree_top_compared',
    'entity_type' => 'node',
    'bundle' => 'feature',
    'label' => 'Inherit tree top compared',
    'description' => 'TODO : Only compared children of theses top compared can be select in the evaluations',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared')),
    ),
  );
  field_create_instance($instance);



  /*
   * Create compared_support evaluation field
   */



  $field = array(
    'field_name' => 'evaluation_compared_support',
    'type' => 'entityreference',
    'cardinality' => -1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared')),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'evaluation_compared_support',
    'entity_type' => 'node',
    'bundle' => 'evaluation',
    'label' => 'Use value of the compared :',
    'description' => 'TODO : We will use theses values to compute percent of the inherited tree',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('compared')),
    ),
  );
  field_create_instance($instance);




}

/**
 * Implements hook_uninstall().
 * This function is called at the module uninstallation
 */
function wikicompare_inherit_tree_uninstall() {


  db_drop_field('cache_feature', 'inherit_tree_id');
  db_drop_index('cache_feature', 'inherit_tree_id');
  field_delete_field('feature_inherit_tree');
  field_delete_field('feature_inherit_tree_top_compared');
  field_delete_field('evaluation_compared_support');


  // Purge all field information
  // api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

}

?>
