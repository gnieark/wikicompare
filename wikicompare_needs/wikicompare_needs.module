<?php


require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_comparative_table.inc';

/**
 * Implements hook_node_info().
 * This function create the new node type we need for the module
 */
function wikicompare_needs_node_info() {
  return array(
    'need' => array(
      'name' => t('Need'),
      'base' => 'need',
      'description' => t('TODO : Need description'),
      'help' => t('TODO : Need submission guidelines'),
      'title_label' => t('Title'),
    ),

  );
}


/**
 * Implements hook_form().
 * We need it to display the title in the node form
 */
function need_form($node, $form_state) {
  return node_content_form($node, $form_state);
}




function wikicompare_needs_form_need_node_form_alter(&$form, &$form_state, $form_id) {

  wikicompare_build_form('form', $form, $form_state);

  $form['wikicompare_features']['#attributes']['style'] = 'display:none;';

  $selected_feature_ids = array();
  if (isset($form_state['node']->wikicompare_features['und'])) {
    foreach ($form_state['node']->wikicompare_features['und'] as $array) {
      $id = $array['target_id'];
      $selected_feature_ids[$id] = $id;
    }
  }


  $selected_feature_itemlist = '';
  $feature_array = array();
  if ($selected_feature_ids) {
    $feature_array = get_recursive_data('feature', $selected_feature_ids);
  

    $itemlist_settings = initialize_itemlist_settings('feature_list_computed');
    $itemlist_settings['context'] = 'selected';
    //Building the data for the item list
    $item_list_data = get_item_list($feature_array['tree'], 'feature', 'selected', 0, $itemlist_settings);
    //Render the item list
    $selected_feature_itemlist = theme_item_list(array('items' => $item_list_data, 'title' => 'Manually selected features', 'type' => 'ul', 'attributes' => array()));
  }


  $select_feature_link = array(
    'text' => 'Select features',
    'title' => 'Select features',
    'selector' => 'dialog-content',
    'path' => 'get_dialog_callback/multidialog/feature/form_selected_features/0/form_selected_features/none',
    'id' => 'select_feature_link',

  );
  
  $form['container_selected_feature'] = array(
    'itemlist' => array('#markup' => $selected_feature_itemlist),
    '#type' => 'container',
    '#id' => 'form_selected_features',
    '#weight' => -2,
    '#suffix' => '<p>' . theme('simple_dialog_link', $select_feature_link) . '</p>'
  
  );

}



function wikicompare_needs_build_form_settings(&$settings, &$node, &$nid, $form, $form_state) {


  if ($form_state['node']->type == 'need') {
      $selected_feature_ids = array();
      if (isset($form_state['node']->wikicompare_features['und'])) {
        foreach ($form_state['node']->wikicompare_features['und'] as $array) {
          $id = $array['target_id'];
          $selected_feature_ids[$id] = $id;
        }
      }

      $settings['wikicompare_needs']['selected_feature_ids'] = $selected_feature_ids;

  }

}


/*****************************************************************
*
*    COMPARATIVE TABLE
*
*****************************************************************/

function wikicompare_needs_comparative_table_main_output(&$output) {


  $output .= wikicompare_table_render_main_itemlist('need', 'Needs', wikicompare_initialize_settings()); //wikicompare_needs_table_render_need();

}

function wikicompare_needs_table_render_need($settings=array()) {

  $db_settings = array('can_be_translated' => 1);
  if (isset($settings['states'])) {
    $db_settings['states'] = $settings['states'];
  }

  //Find all the compared on the first level of the tree
  $needs = request_db('need', $db_settings);

  
  $itemlist_settings = wikicompare_initialize_settings();

  if (isset($settings['fastaction_status'])) {
    $itemlist_settings['fastaction_status'] = $settings['fastaction_status'];
  }

  //Building the data for the item list
  $item_list_data = get_itemlist('need', $needs, 0, $itemlist_settings);

  $output ="<div id='comparative_table_main_need'>";
  //Render the item list
  $output .= theme_item_list(array('items' => $item_list_data, 'title' => 'Need', 'type' => 'ul', 'attributes' => array()));
  $output .= '<p><a id="add_need_link" href="?q=node/add/need">Add</a><span id="add_need_link_fastaction">';
 
  if ($itemlist_settings['fastaction_status']) {
    $need = array(
      'data' => new stdClass(),
    );
    $need['data']->nid = 0;
    $output .= add_fastaction_items('need' , $need);
  }
  $output .= '</span></p>';
  $output .= '<div id="need_table_children_0"></div>';
  $output .="</div>";

  return $output;

}

function wikicompare_needs_wikicompare_comparative_table_prepare_itemlist($key, &$nodes, $_POST) {

  if (!empty($_POST['selected_need_ids'])) {

    $selected_need_ids = array();
    foreach ($_POST['selected_need_ids'] as $selected_need_id) {
      $selected_need_ids[$selected_need_id] = $selected_need_id;
    }

    if (in_array($key, $selected_need_ids)) {
      $nodes[$key]['data']->displayed = True;
    }

  }

}

function wikicompare_needs_wikicompare_comparative_table_prepare_compute(&$selected_feature_ids, $_POST) {

  if (!empty($_POST['selected_need_ids'])) {


    $feature_ids = recover_features($_POST['selected_need_ids']);

    foreach ($feature_ids as $feature_id) {
      $selected_feature_ids[$feature_id] = $feature_id;
    }

  }

}


function wikicompare_needs_wikicompare_comparative_table_fastaction_parent(&$parent_id, $type, $node) {

  if ($type == 'need') {
    if (isset($node->wikicompare_parent_id['und'])) {
      $parent_id = $node->wikicompare_parent_id['und'][0]['target_id'];
    }
  }

}

function wikicompare_needs_wikicompare_comparative_table_fastaction_specific(&$output, $type, $node, $fastaction, $nid) {

  if ($type == 'need') {


    $selected_feature_itemlist = '';
    $selected_feature_hidden = '';
    if ($fastaction == 'edit') {
      $selected_feature_ids = array();
      if (isset($node->wikicompare_features['und'])) {
        foreach ($node->wikicompare_features['und'] as $array) {
          $id = $array['target_id'];
          $selected_feature_ids[] = $id;
        }
      }

      
      $feature_array = array();
      if ($selected_feature_ids) {
        $feature_array = get_recursive_data('feature', $selected_feature_ids);
  
        $itemlist_settings = initialize_itemlist_settings('feature_list_computed');
        $itemlist_settings['context'] = 'selected';
        //Building the data for the item list
        $item_list_data = get_item_list($feature_array['tree'], 'feature', 'selected', 0, $itemlist_settings);
        //Render the item list
        $selected_feature_itemlist = theme_item_list(array('items' => $item_list_data, 'title' => 'Manually selected features', 'type' => 'ul', 'attributes' => array()));

        
        foreach ($selected_feature_ids as $feature_id) {
          $selected_feature_hidden .= '<div class="need_feature">' . $feature_id . '</div>';
        }
        

      }

      

    }


    $select_feature_link = array(
      'text' => 'Select features',
      'title' => 'Select features',
      'selector' => 'dialog-content',
      'path' => 'get_dialog_callback/multidialog/feature/form_selected_features/0/form_selected_features/none',
      'id' => 'select_feature_link',
    );
    $output .= '<div id="form_selected_features">';
    $output .= $selected_feature_itemlist;
    $output .= '</div><div id="need-features" style="display:none;">' . $selected_feature_hidden . '</div><p>' . theme('simple_dialog_link', $select_feature_link) . '</p>';

  }

}

function wikicompare_needs_wikicompare_comparative_table_fastaction_command(&$commands, $type, $nid, $output) {


  if ($type == 'need') {
    $commands[] = ajax_command_invoke('#need_table_children_' . $nid, 'before', array($output));
  }

}


function wikicompare_needs_wikicompare_comparative_table_fastaction_submit(&$node, $type, $_POST) {



  if ($type == 'need') {

    $need_features = array();
    foreach ($_POST['need_feature_ids'] as $feature_id) {
      $array = array();
      $array['target_id'] = $feature_id;
      $array['target_type'] = "node";
      $need_features[] = $array;
    }
    $node->wikicompare_features['und'] = $need_features;


  }

}


function recover_features($need_ids) {


  $feature_ids = array();

  $query = db_select('cache_need', 'n');
  $query->addField('n', 'nid', 'nid');
  $query->addField('n', 'parent_id', 'parent_id');
  $query->addField('f', 'feature_nid', 'feature_id');
  $query->leftjoin('cache_need_feature_rel', 'f', 'n.nid = f.need_nid');
  $query->condition('n.nid', $need_ids, 'in');
  $result = $query->execute();  

  $need_parent_ids = array();
  foreach ($result as $record) {


    if ($record->parent_id != NULL) {
      $need_parent_ids[$record->parent_id] = $record->parent_id;
    }

    //Prevent sending a null value if the need has no feature. We can't do it directly in the sql query through a where clause because we need to get the parent even if the node has no feature
    if ($record->feature_id != NULL) {
      $feature_ids[$record->feature_id] = $record->feature_id;
    }

  }
//TODO Block if parent is disactivated, probably best block the checkbox for children in get_item_list function
  if (!empty($need_parent_ids)) {
    $feature_from_parent_ids = recover_features($need_parent_ids);
    foreach ($feature_from_parent_ids as $feature_id) {
      $feature_ids[$feature_id] = $feature_id;
    }
  }

  return $feature_ids;

}



function need_insert($node) {



  if ($node->language != language_default('language')) {
    return;
  }

  wikicompare_insert_node('need', $node);


  $feature_m2m = array();
  foreach ($node->wikicompare_features['und'] as $feature) {

    $feature_m2m[] = array(
      'need_nid' => $node->nid,
      'feature_nid' => $feature['target_id'],
    );
  }

  $header = array('need_nid', 'feature_nid');

  //Update the cache_implementation table before the compare tree computation
  if (!empty($feature_m2m)) {
    $query = db_insert('cache_need_feature_rel')->fields($header);
    foreach ($feature_m2m as $record) {
      $query->values($record);
    }
    $query->execute();
  }


}

function need_delete($node) {

  wikicompare_delete_node('need', $node);


  db_delete('cache_need_feature_rel')
    ->condition('need_nid', $node->nid)
    ->execute();

}


function wikicompare_needs_wikicompare_node_types(&$array) {

  $array[] = 'need';

}

function wikicompare_needs_wikicompare_cache_update_fields(&$fields, $node_revision) {

  if ($node_revision->type == 'need') {
    $fields['state'] = $node_revision->wikicompare_state['und'][0]['value'];
  }

}

function wikicompare_needs_wikicompare_cache_after_update_fields(&$fields, $node_revision) {

  if ($node_revision->type == 'need') {

    $query = db_select('cache_need_feature_rel', 'f');
    $query->addField('f', 'feature_nid', 'feature_nid');
    $query->condition('f.need_nid', $node_revision->nid);
    $result = $query->execute();

    $new_feature_ids = array();
    if (isset($node_revision->wikicompare_features['und'])) {
      foreach ($node_revision->wikicompare_features['und'] as $feature) {
        $new_feature_ids[$feature['target_id']] = $feature['target_id'];
      }
    }

    $old_feature_ids = array();
    $to_delete = array();
    foreach ($result as $record) {
      $old_feature_ids[$record->feature_nid] = $record->feature_nid;
      if (!in_array($record->feature_nid, $new_feature_ids)) {
        $to_delete[$record->feature_nid] = $record->feature_nid;
      }
    }

    $to_create = array();
    foreach ($new_feature_ids as $feature_id) {
      if (!in_array($feature_id, $old_feature_ids)) {
        $to_create[$feature_id] = array(
          'need_nid' => $node_revision->nid,
          'feature_nid' => $feature_id,
        );
      }
    }

    $header = array('need_nid', 'feature_nid');
    if (!empty($to_create)) {
      $query = db_insert('cache_need_feature_rel')->fields($header);
      foreach ($to_create as $record) {
        $query->values($record);
      }
      $query->execute();
    }

    if (!empty($to_delete)) {
      db_delete('cache_need_feature_rel')
        ->condition('need_nid', $node_revision->nid)
        ->condition('feature_nid', $to_delete, 'in')
        ->execute();
    }

  }

}

function wikicompare_needs_wikicompare_translation_form(&$form, &$form_state, $node) {

  if (isset($form['need_features'])) {
    unset($form_state['node']->wikicompare_features);
  }

}


?>
