<?php

/**
 * @file
 * Install, update, and uninstall functions for the wikicompare module.
 */


function wikicompare_needs_schema() {


dpm('test');
  $schema['cache_need'] = array(

    'description' => 'Cache table for need. Used so the percentage of comparative table are computed faster.',
    'fields' => array(
      'nid' => array(
        'description' => 'The nid of the need node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The active vid of the need node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of the need node',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'parent_need_id' => array(
        'description' => 'The parent id of the need node',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'state' => array(
        'description' => 'The state of the need node',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'has_children' => array(
        'description' => "Boolean indicated if this node has children. This allow us to know this need has children without making each time a big sql query.",
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'nid' => array('nid'),
    ),
    'indexes' => array(
      'parent_need_id' => array('parent_need_id'),
      'state' => array('state'),
    ),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'node_revision' => array(
        'table' => 'node_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'node_parent' => array(
        'table' => 'node',
        'columns' => array('parent_node_id' => 'nid'),
      ),
    )

  ); 


  $schema['cache_need_feature_rel'] = array(

    'description' => 'Cache table storing the link between need and feature. Used so the percentage of comparative table are computed faster.',
    'fields' => array(
      'need_nid' => array(
        'description' => 'The nid of the need node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      'feature_nid' => array(
        'description' => 'The nid of the feature node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'need_nid' => array('need_nid'),
      'feature_nid' => array('feature_nid'),
    ),
    'foreign keys' => array(
      'need_nid' => array(
        'table' => 'node',
        'columns' => array('need_nid' => 'nid'),
      ),
      'feature_nid' => array(
        'table' => 'node_revision',
        'columns' => array('feature_nid' => 'nid'),
      ),
    )

  ); 

  return $schema;

}

/**
 * Implements hook_install().
 * This function is called only once at the module installation
 */
function wikicompare_needs_install() {

  $t = get_t();

  // Ensure that new node type is available.
  node_types_rebuild();
  
  //Assign body field to the new node types
  $types = node_type_get_types();
  node_add_body_field( $types[ 'need' ] , $t('Description'));




 /*
  * Need type related
  */
  
  //Set Need variables
  variable_set('node_options_need', array('status','revision','revision_moderation'));
  variable_set('node_submitted_need', '0');
  
  
  
    //Create parent need field

    $field = array(
      'field_name' => 'need_parent_need',
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('need')),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'need_parent_need',
      'entity_type' => 'node',
      'bundle' => 'need',
      'label' => 'Parent Need',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('need')),
      ),
    );
    field_create_instance($instance);


    //Create features field

    $field = array(
      'field_name' => 'need_features',
      'type' => 'entityreference',
      'cardinality' => -1,
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('feature')),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'need_features',
      'entity_type' => 'node',
      'bundle' => 'need',
      'label' => 'Features',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'target_type' => 'node',
        'handler_settings' => array('target_bundles' => array('feature')),
      ),
    );
    field_create_instance($instance);


    //Create state field

    $field = array(
      'field_name' => 'need_state',
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          'Published' => 'Published',
          'Disactivated' => 'Disactivated',
        ),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'need_state',
      'entity_type' => 'node',
      'bundle' => 'need',
      'label' => 'State',
      'description' => 'TODO : State of the need',
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 'Disactivated',
        ),
      ),
      'widget' => array(
        'type' => 'options_select',
      ),
    );
    field_create_instance($instance);











}




/**
 * Implements hook_uninstall().
 * This function is called at the module uninstallation
 */
function wikicompare_needs_uninstall() {



  //Delete all nodes of need type.

  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'need'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);


  //Delete all variable of feature type.

  variable_del('node_options_need');
  variable_del('node_submitted_need');

  //Delete feature content type.

  field_delete_field('need_parent_need');
  field_delete_field('need_features');
  field_delete_field('need_state');

  
  node_type_delete('need');


  // Purge all field information
  // api.drupal.org/api/function/field_purge_batch/7

  field_purge_batch(1000);

}

?>
