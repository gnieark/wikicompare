<?php

/**
 * @file
 * Install, update, and uninstall functions for the wikicompare module.
 */

require_once drupal_get_path('module', 'wikicompare') . '/wikicompare.install';

function wikicompare_needs_schema() {



  $schema['cache_need'] = wikicompare_node_schema('need');



  $schema['cache_need_feature_rel'] = array(

    'description' => 'Cache table storing the link between need and feature. Used so the percentage of comparative table are computed faster.',
    'fields' => array(
      'need_nid' => array(
        'description' => 'The nid of the need node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      'feature_nid' => array(
        'description' => 'The nid of the feature node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'need_nid' => array('need_nid'),
      'feature_nid' => array('feature_nid'),
    ),
    'foreign keys' => array(
      'need_nid' => array(
        'table' => 'node',
        'columns' => array('need_nid' => 'nid'),
      ),
      'feature_nid' => array(
        'table' => 'node_revision',
        'columns' => array('feature_nid' => 'nid'),
      ),
    )

  ); 

  return $schema;

}

/**
 * Implements hook_install().
 * This function is called only once at the module installation
 */
function wikicompare_needs_install() {

  $t = get_t();

  // Ensure that new node type is available.
  node_types_rebuild();
  
/*
  //Assign body field to the new node types
  $types = node_type_get_types();
*/
  $field = array(
    'field_name' => 'wikicompare_features',
    'type' => 'entityreference',
    'cardinality' => -1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('feature')),
    ),
  );
  field_create_field($field);
/*
  $field = array(
    'field_name' => 'need_state',
    'type' => 'list_text',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        'Published' => 'Published',
        'Disactivated' => 'Disactivated',
      ),
    ),
  );
  field_create_field($field);
*/

  wikicompare_node_install('need');


  $instance = array(
    'field_name' => 'wikicompare_features',
    'entity_type' => 'node',
    'bundle' => 'need',
    'label' => 'Features',
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('feature')),
    ),
  );
  field_create_instance($instance);

  if (module_exists('wikicompare_translation')) {
    variable_set('language_content_type_need', 2);
  }


}




/**
 * Implements hook_uninstall().
 * This function is called at the module uninstallation
 */
function wikicompare_needs_uninstall() {




  //Delete all nodes of need type.

  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'need'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);


  //Delete all variable of feature type.

  variable_del('node_options_need');
  variable_del('node_submitted_need');
  variable_del('language_content_type_need');

  variable_del('new_revisions_need');
  variable_del('comment_anonymous_need');
  variable_del('comment_need');
  variable_del('comment_default_mode_need');
  variable_del('comment_default_per_page_need');
  variable_del('comment_form_location_need');
  variable_del('comment_preview_need');
  variable_del('comment_subject_field_need');

  //Delete feature content type.

//  field_delete_instance('need_parent_need'); //TODO
  field_delete_field('wikicompare_features');
//  field_delete_field('need_state');


  field_delete_instance(field_read_instance('node', 'body', 'need'));
  field_delete_instance(field_read_instance('comment', 'comment_body', 'comment_node_need'));
  
  node_type_delete('need');


  // Purge all field information
  // api.drupal.org/api/function/field_purge_batch/7

  field_purge_batch(1000);

}

?>
