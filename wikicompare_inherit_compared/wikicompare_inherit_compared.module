<?php


function wikicompare_inherit_compared_menu() {

  $items = array();


  $items['compute_inherit_callback'] = array(
    'page callback' => 'compute_inherit_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;

}


function compute_inherit_response($method = 'ajax') {

  if ($method == 'ajax') {



    $commands = array();


    if ($_POST['use_from_inherit'] == 'true') {


      $inherit_id = NULL;
      $support = 0;

      $query = db_select('cache_implementation', 'n');
      $query->addField('c', 'inherit_compared_id', 'inherit_id');
      $query->addField('ci', 'support', 'support');
      $query->leftjoin('cache_compared', 'c', 'n.compared_id = c.nid');
      $query->leftjoin('cache_implementation', 'ci', 'c.inherit_compared_id = ci.compared_id AND ci.feature_id = n.feature_id');
      $query->condition('n.nid', $_POST['node_id']);
      $result = $query->execute();
      foreach ($result as $record) {
        $inherit_id = $record->inherit_id;
        $support = $record->support;
      }

      if ($inherit_id != NULL) {
        if ($support == 1) {
          $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'attr', array('checked', 'checked'));
        } else {
          $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'removeAttr', array('checked'));
        }
        $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'attr', array('disabled', 'disabled'));
      }

    } else {
      $query = db_select('cache_implementation', 'n');
      $query->addField('n', 'support', 'support');
      $query->condition('n.nid', $_POST['node_id']);
      $result = $query->execute();
      foreach ($result as $record) {
        $support = $record->support;
      }

      if ($support == 1) {
        $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'attr', array('checked', 'checked'));
      } else {
        $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'removeAttr', array('checked'));
      }
      $commands[] = ajax_command_invoke('#edit-wikicompare-support-und', 'removeAttr', array('disabled'));

    }
    

    $page = array('#type' => 'ajax', '#commands' => $commands);
    return $page;

  //If javascript isn't enabled, we redirect to an error page.
  } else {
    $output = t("You need to activate javascript to use the comparative table."); //TO DO put this message in constant
    return $output;
  }


}

function wikicompare_inherit_compared_modify_form_no_implementation(&$form, &$output, $form_type, $node, $readonly) {

  if ($node->type == 'compared') {

    $title = 'No inherited compared';
    $inherit_id = 0;
    if (isset($node->wikicompare_inherit_compared_id['und'])) {
      $inherit_id = $node->wikicompare_inherit_compared_id['und'][0]['target_id'];
      $res = get_recursive_data('compared', array($inherit_id));
      $title = $res['data'][$inherit_id]['data']->fulltitle;
    }

    $nid = 0;
    if (isset($node->nid)) {
      $nid = $node->nid;
    }

    $select_inherit_link = array(
      'text' => 'Select inherited compared',
      'title' => 'Select inherited compared',
      'selector' => 'dialog-content',
      'path' => 'get_dialog_callback/selectdialog/compared/form_selected_inherit/' . $nid . '/wikicompare-inherit-compared-id/inherit_id',
    );
    $clear_inherit_link = l('Clear', '/',  array('attributes' => array('class' => array('clear_link_inherit'), 'type' => $node->type)));

    if ($form_type == 'form') {

      $form['container_selected_inherit'] = array(
        'title' => array('#markup' => $title),
        '#type' => 'container',
        '#id' => 'form_selected_inherit',
        '#weight' => -3,
        '#suffix' => '<p>' . theme('simple_dialog_link', $select_inherit_link) . ' ' . $clear_inherit_link . '</p>'
  
      );
      hide($form['wikicompare_inherit_compared_id']);
      $form['wikicompare_inherit_compared_id']['#attributes']['style'] = 'display:none;';

    }

    if ($form_type == 'fastedit') {
      $output .= '<p><span id="form_selected_inherit">' . $title . '</span>';
      if ($readonly != True) {
        $output .= '<span id="inherit_id" style="display:none;">' . $inherit_id . '</span> ' . theme('simple_dialog_link', $select_inherit_link) . ' ' . $clear_inherit_link . '</p>';
      }

      
    }

  }  
}

function wikicompare_inherit_compared_modify_form_implementation(&$form, &$output, &$readonly, &$test, $form_type, $node, $fastaction) {

  if ($node->type == 'implementation') {
    
    $query = db_select('cache_implementation', 'n');
    $query->addField('c', 'inherit_compared_id', 'inherit_id');
    $query->addField('c', 'has_children', 'compared_has_children');
    $query->addField('f', 'has_children', 'feature_has_children');
    $query->addField('ci', 'support', 'inherit_support');
    $query->leftjoin('cache_compared', 'c', 'n.compared_id = c.nid');
    $query->leftjoin('cache_feature', 'f', 'n.feature_id = f.nid');
    $query->leftjoin('cache_implementation', 'ci', 'c.inherit_compared_id = ci.compared_id AND n.feature_id = ci.feature_id');
    $query->condition('n.nid', $node->nid);
    $result = $query->execute();
    foreach ($result as $record) {
      $res = $record;
    }

    if ($form_type == 'form') {
      if ($res->inherit_id == NULL || $res->compared_has_children == 1 || $res->feature_has_children == 1) {
        hide($form['wikicompare_use_from_inherit']);
      } else {

        $reset_link = array(
          '#type' => 'link',
          '#title' => 'compute inherit',
          //The callback link, /nojs is automatically replace for /ajax by drupal. The secondi argument indicate if we have to display or hide the elements
          '#href' => 'compute_inherit_callback/nojs',
          '#id' => 'compute_inherit_link_' . $node-> nid,
          '#attributes' => array(
            'class' => array('compute_inherit_link'),
            'style' => 'display:none',
          ),
        );
        $form['wikicompare_use_from_inherit']['und']['#suffix'] = drupal_render($reset_link);

        if ($form['wikicompare_use_from_inherit']['und']['#default_value'] == 1) {
          $form['wikicompare_support']['und']['#default_value'] = $res->inherit_support;
          $form['wikicompare_support']['und']['#disabled'] = TRUE;
        }
      }
      $form['wikicompare_use_from_inherit']['#weight'] = -2;


    }

    if ($form_type == 'fastedit') {

      if ($res->inherit_id != NULL) {

        //I wasn't able to use the renderable array, so I coded directly in html
        $output .= '<input class="form_implementation_fastedit_inherit form-checkbox" type="checkbox" id="edit-wikicompare-use-from-inherit-und"';

        if ($fastaction == 'edit') {
          if ($node->wikicompare_use_from_inherit['und'][0]['value'] == 1) {
            $output .= ' checked="checked"';
            $test = TRUE;
          }
        }

        if ($readonly == TRUE) {
          $output .= ' disabled="disabled"';
        }

        $reset_link = array(
          '#type' => 'link',
          '#title' => 'compute inherit',
          //The callback link, /nojs is automatically replace for /ajax by drupal. The secondi argument indicate if we have to display or hide the elements
          '#href' => 'compute_inherit_callback/nojs',
          '#id' => 'compute_inherit_link_' . $node-> nid,
          '#attributes' => array(
            'class' => array('compute_inherit_link'),
            'style' => 'display:none',
          ),
        );

        $output .= ' value="1" />' . drupal_render($reset_link) . '<label class="option" for="form_implementation_fastedit_usefrominherit_' . $node->nid . '">Use from inherit? </label>';

        //Disable the support field located after this one
        if ($node->wikicompare_use_from_inherit['und'][0]['value'] == 1) {
          $readonly = TRUE;
        }
      }
    }

  }

}

function wikicompare_inherit_compared_test_form_implementation(&$test_support, $test, $node) {

  if ($test == TRUE) {

    $query = db_select('cache_implementation', 'n');
    $query->addField('c', 'inherit_compared_id', 'inherit_id');
    $query->addField('c', 'has_children', 'compared_has_children');
    $query->addField('f', 'has_children', 'feature_has_children');
    $query->addField('ci', 'support', 'inherit_support');
    $query->leftjoin('cache_compared', 'c', 'n.compared_id = c.nid');
    $query->leftjoin('cache_feature', 'f', 'n.feature_id = f.nid');
    $query->leftjoin('cache_implementation', 'ci', 'c.inherit_compared_id = ci.compared_id AND n.feature_id = ci.feature_id');
    $query->condition('n.nid', $node->nid);
    $result = $query->execute();
    foreach ($result as $record) {
      if ($record->inherit_support == 1) {
        $test_support = TRUE;
      } else { //The else because in any case, the inherited override the previous value
        $test_support = FALSE;
      }
    }

  }

}

function wikicompare_inherit_compared_submit_element(&$node, &$donotupdate,  $_POST) {

  if ($node->type == 'compared') {
    if ($_POST['inherit_id'] != 0) {

          $node->wikicompare_inherit_compared_id['und'][0]['target_id'] = $_POST['inherit_id'];
          $node->wikicompare_inherit_compared_id['und'][0]['target_type'] = "node";
      
    } else {
          $node->wikicompare_inherit_compared_id['und'] = NULL;
    }
  }


  if ($node->type == 'implementation') {

    if ($_POST['use_from_inherit'] == 'true') {
      $node->wikicompare_use_from_inherit['und'][0]['value'] = 1;
      $donotupdate = True;
    } else {
      $node->wikicompare_use_from_inherit['und'][0]['value'] = 0;

    }
  }


}



//Update inherit_compared_id in cache_compared table
function wikicompare_inherit_compared_cache_insert_fields(&$fields, $type, $node) {

  if ($type == 'compared') {

    $compared_inherit_compared = NULL;
    if (isset($node->compared_inherit_compared['und'][0])) {
      $compared_inherit_compared = $node->compared_inherit_compared['und'][0]['target_id'];
    }

    $fields['inherit_compared_id'] = $compared_inherit_compared;
  }

}

//Update default value of use_from_inherit field when we insert an implementation
function wikicompare_inherit_compared_insert_implementation(&$node_implementation) {

  $node_implementation->implementation_use_from_inherit['und'][0]['value'] = 1;

}

//Update default value of use_from_inherit field in cache when we insert an implementation
function wikicompare_inherit_compared_cache_implementation_fields(&$cache_implementation, $node) {

  $cache_implementation['use_from_inherit'] = $node->implementation_use_from_inherit['und'][0]['value'];

}

//Add the header use_from_inherit for the mass implementation insert in feature/compared creation
function wikicompare_inherit_compared_cache_fields_header(&$header, $type) {

  if ($type == 'compared') {
    $header[] = 'inherit_compared_id';
  }

  if ($type == 'implementation') {
    $header[] = 'use_from_inherit';
  }

}


//Update cache so all inherited children are now without inherit compared when we delete a compared
function wikicompare_inherit_compared_cache_compared_delete($node) {

  $query = db_select('cache_compared', 'c');
  $query->addField('c', 'nid', 'nid');
  $query->condition('c.inherit_compared_id', $node->nid);
  $result = $query->execute();

  $to_update = array();
  foreach($result as $record) {
    $to_update[$record->nid] = $record->nid;
  }

  if (!empty($to_update)) {
    db_update('cache_compared')
      ->fields(array(
        'inherit_compared_id' => NULL,
      ))
      ->condition('nid', $to_update, 'IN')
      ->execute();


    //If some implementation were inheriting this compared, we update them
    wikicompare_update_compare_tree('compared', $to_update);

  }

}


//When we update a compared, we check if his inherit compared field has changed, and if yes we update him
function wikicompare_inherit_compared_preupdate_compared(&$test, $node_revision, $current_node) {

      if ($node_revision->wikicompare_inherit_compared_id) {
        $node_revision_inherit = $node_revision->wikicompare_inherit_compared_id['und'][0]['target_id'];
      } else {
        $node_revision_inherit = NULL;
      }

      if ($current_node->wikicompare_inherit_compared_id) {
        $current_node_inherit = $current_node->wikicompare_inherit_compared_id['und'][0]['target_id'];
      } else {
        $current_node_inherit = NULL;
      }

      //Update the current compared because the value of his implementation may have changed if he has no children compared
      
      if ($node_revision_inherit != $current_node_inherit) {
        $test = TRUE;

      }

}



//When we update a compared, we check if his use_from_inherit has changed, and if yes we update him
function wikicompare_inherit_compared_preupdate_implementation(&$test, $node_revision, $current_node) {



      if ($node_revision->wikicompare_use_from_inherit['und'][0]['value'] != $current_node->wikicompare_use_from_inherit['und'][0]['value']) {
        $test = TRUE;



      }

}


function wikicompare_inherit_compared_cache_update_fields(&$fields, $node_revision) {


  if ($node_revision->type == 'compared') {

    $inherit_id = NULL;


    if (isset($node_revision->wikicompare_inherit_compared_id['und'][0])) {
      $inherit_id = $node_revision->wikicompare_inherit_compared_id['und'][0]['target_id'];
    }
    $fields['inherit_compared_id'] = $inherit_id;
  }

  if ($node_revision->type == 'implementation') {
    $fields['use_from_inherit'] = $node_revision->wikicompare_use_from_inherit['und'][0]['value'];
  }

}



//Update the main query of wikicompare_update_compare_tree to add some value we will need later
function wikicompare_inherit_compared_update_main_query(&$query) {

  $query->addField('fs', 'use_from_inherit', 'use_from_inherit');
  //Recover the percent value of the inherited implementation
  $query->addField('nc', 'inherit_compared_id', 'inheriting_compared_id');
  $query->addField('ncinc', 'nid', 'inheriting_implementation_nid');
  $query->addField('ncincctc', 'nid', 'inheriting_implementation_cache_nid');
  $query->addField('ncincctc', 'percent', 'inheriting_implementation_cache_percent');
  $query->addField('ncincctc', 'css_class', 'inheriting_implementation_cache_css_class');

  $query->leftjoin('cache_implementation', 'ncinc', 'nc.inherit_compared_id = ncinc.compared_id'); //Get implementation of the inherit compared node
  $query->leftjoin('cache_comparative_table', 'ncincctc', 'ncinc.nid = ncincctc.nid');  //Get the percent of the inherited implementation

  $query->where('ncinc.feature_id = fs.feature_id OR nc.inherit_compared_id IS NULL'); //We keep only the implementation of the inherit compared node which has the same feature than the implementation.

}



//Prepare the variables before the node computation. Essentially check if we have the percent of the inherited implementation and recover the children through inherit we will update after the computation
function wikicompare_inherit_compared_update_comparative_table_preparation($nids, &$nodes, $type) {



    //Mark to update the inherited implementation without cache percent
    $to_update = array();
    foreach($nodes as $node) {
      if ($node->inheriting_compared_id) {
        if (!$node->inheriting_implementation_cache_nid) {
          $to_update[$node->inheriting_implementation_nid] = $node->inheriting_implementation_nid;
        }
      }
    }



    //Recover the missing cache percent
    if (!empty($to_update)) {
      //There is a danger here if the inherited compared are looping. Later, we have to think about adding a security when we insert/update the inherit field of a compared which check if there is a loop. There is a secutity in the interface (in select popin) but not in this update code.
      $res = wikicompare_update_compare_tree('implementation', $to_update);
      foreach($nodes as $node) {
        if (isset($res[$node->inheriting_implementation_nid])) {
          $node->inheriting_implementation_cache_nid = $node->inheriting_implementation_nid;
          $node->inheriting_implementation_cache_percent = $res[$node->inheriting_implementation_nid]['percent'];
          $node->inheriting_implementation_cache_css_class = $res[$node->inheriting_implementation_nid]['css_class'];
        }
        
      }
    }

    //Recover children_through_inherit, so we can update them at the end of wikicompare_update_compare_tree
    $res_search_inherit_compared_children = '';
    foreach($nodes as $node) {
      if ($res_search_inherit_compared_children) {
        $res_search_inherit_compared_children = $res_search_inherit_compared_children . ',';
      }
      $res_search_inherit_compared_children = $res_search_inherit_compared_children . "('" . $node->fid . "','" . $node->cid . "')";
    }

    $through_inherit_childs = array();
    if (($type == 'compared' && !empty($nids)) || $res_search_inherit_compared_children) {
      $query = db_select('cache_implementation', 'i');
      $query->addField('i', 'nid', 'nid');
      $query->addField('i', 'feature_id', 'fid');
      $query->addField('nc', 'inherit_compared_id', 'inherit_compared_id');
      $query->join('cache_feature', 'nf', 'i.feature_id = nf.nid');
      $query->join('cache_compared', 'nc', 'i.compared_id = nc.nid');
      //Only the implementation which has no children on both axis will be updated because only them can have their percent updated by inheritance
      $query->condition('nf.has_children', 0); 
      $query->condition('nc.has_children', 0);

      switch ($type) {
        case "compared":
          $query->condition('nc.inherit_compared_id', $nids, 'IN');
          break;
        default:
          $query->where('(i.feature_id, nc.inherit_compared_id) IN (' . $res_search_inherit_compared_children . ')');
          break;
      }
      $result = $query->execute();

      
      foreach($result as $record) {
        //We assign the children implementation in a array with fid and cid as key so their parents can recover them with fid and cid key
        $through_inherit_childs[$record->fid][$record->inherit_compared_id][$record->nid] = $record;
      }
    }


    //Assign children to each node to compute.
    foreach($nodes as $node) {
      $node->through_inherit_childs = array();
      if (isset($through_inherit_childs[$node->fid][$node->cid])) {
        //Assign the children thanks to fid and cid key
        $node->through_inherit_childs = $through_inherit_childs[$node->fid][$node->cid];
      }
    }


}


//Add in the implementation to update the implementation which inherit the current implementation
function wikicompare_inherit_compared_update_comparative_table_post(&$to_update, $node) {

  if (!empty($node->through_inherit_childs)) {
    foreach($node->through_inherit_childs as $child) {
      $to_update[$child->nid] = $child->nid;
    }
  }

}

//Return the data computed according to the inherited compared
function wikicompare_inherit_compared_from_other_support(&$node) {

  //Work only if the compared of the implementation inherit a node and we didn't override the information in the implementation
  if ($node->inheriting_compared_id && $node->use_from_inherit == 1) {
    $node->percent = $node->inheriting_implementation_cache_percent;
    $node->css_class = $node->inheriting_implementation_cache_css_class;
  }

}


//Search for the new fields in compared in the flush tables function 
function wikicompare_inherit_compared_flush_select_compared(&$query, $type) {

  if ($type == 'compared') {
    $query->addField('nic', 'wikicompare_inherit_compared_id_target_id', 'inherit_compared_id');
    $query->leftjoin('field_revision_wikicompare_inherit_compared_id', 'nic', 'n.vid = nic.revision_id');
  }

  if ($type == 'implementation') {
    $query->addField('nu', 'wikicompare_use_from_inherit_value', 'use_from_inherit');
    $query->leftjoin('field_revision_wikicompare_use_from_inherit', 'nu', 'n.vid = nu.revision_id');
  }

}



//Update the new fields in compared in the flush tables function
function wikicompare_inherit_compared_flush_cache_compared(&$to_insert, $record, $type) {

  if ($type == 'compared') {
    $to_insert[$record->nid]['inherit_compared_id'] = $record->inherit_compared_id;
  }

  if ($type == 'implementation') {
    $to_insert[$record->nid]['use_from_inherit'] = $record->use_from_inherit;
  }
}


function  wikicompare_inherit_compared_wikicompare_request_db($query, $type, $settings) {

  if ($type == 'compared') {
    $query->addField('n', 'inherit_compared_id', 'inherit_compared_id');
  }

  if ($type == 'implementation') {
    $query->addField('n', 'use_from_inherit', 'use_from_inherit');
  }

}


function wikicompare_inherit_compared_wikicompare_translation_form(&$form, &$form_state, $node) {

  if (isset($form['wikicompare_inherit_compared_id'])) {
    $form['container_selected_inherit'] = $form['container_selected_inherit']['title'];
    unset($form['wikicompare_inherit_compared_id']);
    unset($form_state['node']->wikicompare_inherit_compared_id);

  }

}


?>
