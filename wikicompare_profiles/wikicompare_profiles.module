<?php

/**
 * @file
 * Define the function relative to the profiles type.
 */

require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_comparative_table.inc';



/*****************************************************************
*
*    MODULE
*
*****************************************************************/

/**
 * Implements hook_node_info().
 * This function create the new node type we need for the module.
 */
function wikicompare_profiles_node_info() {
  return array(
    'profile' => array(
      'name' => t('Profile'),
      'base' => 'profile',
      'title_label' => t('Title'),
    ),
  );
}





/*****************************************************************
*
*    CORE_FUNCTIONS
*
*****************************************************************/

/**
 * Add the profiles specific fields in db request.
 *
 * @param $query
 *   The query to update. Passed by reference.
 *
 * @param $type
 *   The type of the request.
 */
function wikicompare_profiles_request_db($query, $type) {
  if ($type == 'profile') {
    $query->addField('nf', 'criterion_nid', 'profile_criterion_id');
    $query->leftjoin('wikicompare_cache_profile_criterion_rel', 'nf', 'n.nid = nf.profile_nid');
  }
}



/**
 * Recover all profile_criterions in an array to use them later.
 *
 * @param $node_array
 *   The node which will be returned. Passed by reference.
 *
 * @param $profile_criterions
 *   The array containing the profile_criterions we will use later. Passed by reference.
 *
 * @param $record
 *   The record from the database.
 *
 * $type
 *   The type of the request.
 */
function wikicompare_profiles_request_db_build(&$node_array, &$profile_criterions, $record, $type) {

  if ($type == 'profile') {

    if ($record->profile_criterion_id != NULL) {
      $profile_criterions[$record->nid][$record->profile_criterion_id] = $record->profile_criterion_id;
    }

    unset($node_array['data']->profile_criterion_id);
    //Security to avoid to make isset control later.
    $node_array['profile_criterions'] = array();

  }

}



/**
 * Assign node criterions to the $res. We couldn't do it  while we were parsing the records.
 *
 * @param $res
 *   The ressource which will be returned. Passed by reference.
 *
 * @param $profile_criterions
 *   The array we build before while we were parsing the records.
 */
function wikicompare_profiles_request_db_after(&$res, $profile_criterions) {

  foreach ($profile_criterions as $nid => $criterions) {
    $res[$nid]['profile_criterions'] = $criterions;
  }

}





/*****************************************************************
*
*    NODES
*
*****************************************************************/

/**
 * Implements hook_insert().
 * Executed each time a profile node is created.
 *
 * @param $node
 *   The node object which was created.
 */
function profile_insert($node) {

  //Call the type-agnostic function.
  wikicompare_insert_node('profile', $node);

  //Prepare to insert the many2many cache between profiles and criterions.
  $criterions_m2m = array();
  if (isset($node->wikicompare_criterions['und'])) {
    foreach ($node->wikicompare_criterions['und'] as $criterion) {
      $criterion_m2m[] = array(
        'profile_nid' => $node->nid,
        'criterion_nid' => $criterion['target_id'],
      );
    }
  }

  //Insert the data in the many2many table cache.
  $header = array('profile_nid', 'criterion_nid');
  if (!empty($criterion_m2m)) {
    $query = db_insert('wikicompare_cache_profile_criterion_rel')->fields($header);
    foreach ($criterion_m2m as $record) {
      $query->values($record);
    }
    $query->execute();
  }

}



/**
 * Implements hook_delete().
 * Executed each time a profile is deleted.
 *
 * @param $node
 *   The node object which will be deleted.
 */
function profile_delete($node) {

  //Call the type-agnostic function.
  wikicompare_delete_node('profile', $node);

  //Remove the many2many cache data related to the deleted profile.
  db_delete('wikicompare_cache_profile_criterion_rel')
    ->condition('profile_nid', $node->nid)
    ->execute();

}



/**
 * Add the profile flag to the array in argument.
 *
 * @param $array
 *   The array to update. Passed by reference.
 */
function wikicompare_profiles_node_types(&$array) {

  //Update the array.
  $array[] = 'profile';

}



/**
 * Add the profile flag to the array in argument.
 *
 * @param $array
 *   The array to update. Passed by reference.
 */
function wikicompare_profiles_after_update_fields($node_revision) {

  //Profile specific code.
  if ($node_revision->type == 'profile') {

    //Get new criterions.
    $new_criterion_ids = array();
    if (isset($node_revision->wikicompare_criterions['und'])) {
      foreach ($node_revision->wikicompare_criterions['und'] as $criterion) {
        $new_criterion_ids[$criterion['target_id']] = $criterion['target_id'];
      }
    }

    //Get old criterions, and find the ones we profile to delete.
    $to_delete = array();
    $old_criterion_ids = array();
    $query = db_select('wikicompare_cache_profile_criterion_rel', 'f');
    $query->addField('f', 'criterion_nid', 'criterion_nid');
    $query->condition('f.profile_nid', $node_revision->nid);
    $result = $query->execute();
    foreach ($result as $record) {
      $old_criterion_ids[$record->criterion_nid] = $record->criterion_nid;
      if (!in_array($record->criterion_nid, $new_criterion_ids)) {
        $to_delete[$record->criterion_nid] = $record->criterion_nid;
      }
    }

    //Find the criterions we profile to create.
    $to_create = array();
    foreach ($new_criterion_ids as $criterion_id) {
      if (!in_array($criterion_id, $old_criterion_ids)) {
        $to_create[$criterion_id] = array(
          'profile_nid' => $node_revision->nid,
          'criterion_nid' => $criterion_id,
        );
      }
    }

    //Insert the new criterions in the cache many2many table.
    $header = array('profile_nid', 'criterion_nid');
    if (!empty($to_create)) {
      $query = db_insert('wikicompare_cache_profile_criterion_rel')->fields($header);
      foreach ($to_create as $record) {
        $query->values($record);
      }
      $query->execute();
    }

    //Delete the old criterions in the cache many2many table.
    if (!empty($to_delete)) {
      db_delete('wikicompare_cache_profile_criterion_rel')
        ->condition('profile_nid', $node_revision->nid)
        ->condition('criterion_nid', $to_delete, 'in')
        ->execute();
    }

  }

}





/*****************************************************************
*
*    COMPARATIVE TABLE
*
*****************************************************************/

/*
 * Extract profile ids from argument in comparative table page load.
 */
function wikicompare_profiles_comparative_table_extract_arguments(&$settings, $selected_profiles) {

  $settings['selected_profile_ids'] = array();
  if ($selected_profiles != 0) {
    $selected_profiles = explode('-', $selected_profiles);
    foreach ($selected_profiles as $profile_id) {
      $settings['selected_profile_ids'][$profile_id] = $profile_id;
    }
  }

  if (!empty($settings['selected_profile_ids'])) {
    $settings['computed'] = 1;
  }

}



/*
 * Generate the main profile itemlist in the wikicompare table.
 *
 * @param $output
 *   The html code which will be send to the user. Passed by reference.
 */
function wikicompare_profiles_comparative_table_main_output(&$output) {
  //Call the generic function which generate the main itemlist.
  $settings = wikicompare_initialize_settings(array('displayed_ids' => array()));
  $output .= wikicompare_table_render_main_itemlist('profile', 'Profiles', $settings);
}



/*
 * Set the profile itemlist as translate type.
 */
function wikicompare_profiles_comparative_table_main_output_translate(&$settings, $type) {
  if ($type == 'profile' && $settings['context'] == 'table') {
    $settings['translate'] = True;
  }
}



/*
 * Auto check the already selected profiles in main table.
 *
 * @param $nid
 *   The nid of the tested node.
 *
 * @param $nodes
 *   The nodes array which contains the data which will be used in the render itemlist function.
 *
 * @param $POST
 *   The data coming from the javascript.
 */
function wikicompare_profiles_table_prepare_itemlist(&$settings) {

  if (!empty($POST['selected_profile_ids'])) {
    //If the node is in the global variable of the javascript, we mark it to be checked.
    $settings['displayed_ids'] = $settings['selected_profile_ids'];
  }

}



/*
 * Add the criterions of the profiles to the criterions which will be used to compute the comparative table.
 *
 * @param $selected_criterion_ids
 *   Array containing the criterions which will be used to compute the comparative table.
 *
 * @param $POST
 *   The data coming from the javascript.
 *
 * @param $settings
 *   The settings for the db request.
 */
function wikicompare_profiles_table_prepare_compute(&$selected_criterion_ids, $settings) {

  if (!empty($settings['selected_profile_ids'])) {
    //Call the recursive function to add the criterions. The function must be recursive because we only have the nids of the profiles at the base of the tree, and we must also include the criterions of their parents.
    $selected_criterion_ids += wikicompare_profiles_recover_criterions($settings['selected_profile_ids'], $settings);
  }

}



/*
 * Extract criterions from profiles.
 *
 * @param $profile_ids
 *   The ids of the profiles we want to get the criterions.
 *
 * @param $settings
 *   The settings for the db request.
 *
 * @return $criterion_ids
 *   The ids of the criterion we will use for the computation.
 */
function wikicompare_profiles_recover_criterions($profile_ids, $settings) {

  //Get the details of the selected profiles.
  $profiles = request_db('profile', array('nids' => $profile_ids), $settings);

  $criterion_ids = array();
  $parent_ids = array();
  foreach ($profiles as $profile) {
    //Get criterions.
    foreach ($profile['profile_criterions'] as $fid) {
      $criterion_ids[$fid] = $fid;
    }
    //Get parent for the recursive call.
    if ($profile['data']->parent_id != NULL) {
      $parent_ids[$profile['data']->parent_id] = $profile['data']->parent_id;
    }
  }

  if (!empty($parent_ids)) {
    //Recursive call.
    $criterion_ids += wikicompare_profiles_recover_criterions($parent_ids, $settings);
  }

  return $criterion_ids;

}



/*
 * Add commmand to reset the profile part of the table.
 *
 * @param $commands
 *   The commands which will be send to the javascript.
 *
 * @param $settings
 *   The context of the ajax call.
 */
function wikicompare_profiles_table_send_compute(&$commands, $settings) {

  //Command to reset table.
  $commands[] = ajax_command_replace('#comparative-table-main-profile', wikicompare_table_render_main_itemlist('profile', 'Profiles', $settings));

}



/*
 * Initialize selected_profile_ids settings.
 */
function wikicompare_profiles_table_initialize_settings(&$keys) {
  $keys[] = 'selected_profile_ids';
}



/*
 * Initialize the translate flag for profile.
 */
function wikicompare_profiles_table_clean_translate(&$settings, $type) {
  if ($type == 'profile') {
    $settings['translate'] = True;
  }
}



/*
 * Add commmand to reset the profile part of the table.
 *
 * @param $commands
 *   The commands which will be send to the javascript.
 *
 * @param $type
 *   The type of the node
 *
 * @param $reset
 *   If we wan to reset the profile
 *
 * @param $settings
 *   The context of the ajax call.
 */
function wikicompare_profiles_table_clean_reset(&$commands, $type, $reset, $settings) {

  if ($type == 'profile' && $reset == True) {
    $settings['displayed_ids'] = $settings['selected_profile_ids'];
    $commands[] = ajax_command_replace('#comparative-table-main-profile', wikicompare_table_render_main_itemlist('profile', 'Profiles', $settings));
  }

}





/*****************************************************************
*
*    FORM
*
*****************************************************************/

/**
 * Implements hook_form().
 * We need it to display the title in the node form
 */
function profile_form($node, $form_state) {
  return node_content_form($node, $form_state);
}



/**
 * Implements hook_form_TYPE_node_form_alter().
 * This hook allow us to alter the edit form of the node.
 */
function wikicompare_profiles_form_profile_node_form_alter(&$form, &$form_state, $form_id) {
  //Call type-agnostic function.
  wikicompare_build_form(array(),'form', $form, $form_state, 'profile');
}



/**
 * Send the criterions of the profile node to javascript file, so we can checked the criterions by default in the popin.
 *
 * @param $settings
 *   The settings which will be send to javascript. Passed by reference.
 *
 * @param $form_state
 *   The array containing information of the node.
 */
function wikicompare_profiles_build_form_settings(&$settings, $form_state) {

  if ($form_state['node']->type == 'profile') {

      //Get the criterions of the profile node.
      $selected_criterion_ids = array();
      if (isset($form_state['node']->wikicompare_criterions['und'])) {
        foreach ($form_state['node']->wikicompare_criterions['und'] as $array) {
          $fid = $array['target_id'];
          $selected_criterion_ids[] = $fid;
        }
      }

      //Insert the criterion in the settings to send them to javascript.
      $settings['wikicompare_profiles']['selected_criterion_ids'] = $selected_criterion_ids;

  }

}



/**
 * Remove important profile fields from translated node.
 *
 * @param $form
 *   The form array which will be used by Drupal to build the node form. Passed by reference.
 *
 * @param $form_state
 *   Array containing in-depth information of the node and form settings. Passed by reference.
 *
 * @param $node
 *   Object containing the detail of the node.
 */
function wikicompare_profiles_wikicompare_translation_form(&$form, &$form_state, $node) {

  if (isset($form['profile_criterions'])) {
    unset($form_state['node']->wikicompare_criterions);
  }

}



/**
 * Add the field specific to profile at the end of the form.
 *
 * @param $form
 *   The form array which will be used by Drupal to build the node form. Passed by reference.
 *
 * @param $form_state
 *   Array containing in-depth information of the node and form settings. Passed by reference.
 *
 * @param $output
 *   The HTML code which will be inserted in the comparative table to display the fastaction form. Passed by reference.
 *
 * @param $form_type
 *   Flag defining if the function is called to build a form node of a fastaction form.
 *
 * @param $type
 *   The type of the consulted node.
 *
 * @param $node
 *   Object containing the detail of the node.
 *
 * @param $fastaction
 *   The fastaction (add or edit)
 *
 * @param $nid
 *   The nid of the consulted node.
 */
function wikicompare_profiles_build_form(&$form, &$form_state, &$output, $form_type, $type, $node, $fastaction, $nid) {

  if ($type == 'profile') {

    $selected_criterion_itemlist = '';
    $selected_criterion_hidden = '';
    //Get data from object.
    $selected_criterion_ids = array();
    if (isset($node->wikicompare_criterions['und'])) {
      foreach ($node->wikicompare_criterions['und'] as $array) {
        $fid = $array['target_id'];
        $selected_criterion_ids[$fid] = $fid;
      }
    }

    //Build the itemlist from the criterions of the object.
    $criterions = array();
    if (!empty($selected_criterion_ids)) {
      $settings = wikicompare_initialize_settings(array('context' => 'selected', 'computed' => 1, 'no_children_link' => 1));
      $criterions = wikicompare_build_recursive_data('criterion', $selected_criterion_ids, $settings);
      $selected_criterion_itemlist = wikicompare_build_itemlist('criterion', $criterions['tree'], 0, $settings);
      foreach ($selected_criterion_ids as $criterion_id) {
        $selected_criterion_hidden .= '<div class="profile-criterion">' . $criterion_id . '</div>';
      }
    }

    //Link which will open a popin where we can select the criterions.
    $select_criterion_link = array(
      '#type' => 'link',
      '#title' => 'Select criterions',
      '#href' => 'wikicompare-get-dialog-callback/nojs',
      '#id' => 'select-criterion-link-' . $nid,
      '#attributes' => array(
        'class' => array('ajaxlink'),
        'action' => 'open-dialog',
        'dialog-action' => 'select-criterions-profile',
        'side' => 'left',
        'nid' => $nid,
        'ntype' => 'criterion',
        'context' => 'multidialog',
        'container' => 'wikicompare-criterions',
      ),
    );

    if ($form_type == 'form') {
      //The container of the itemlist.
      $form['container_selected_criterion'] = array(
        'itemlist' => array('#markup' => $selected_criterion_itemlist),
        '#type' => 'container',
        '#id' => 'container-wikicompare-criterions',
        '#weight' => -2,
      );

      //The link is visible only in the main language node.
      if ($node->language == language_default('language')) {
        $form['container_selected_criterion']['#suffix'] = '<div id="initialize-profile-criterions"/><p>' . render($select_criterion_link) . '</p>';
      }

      //Hide the field from drupal. We can't use the hide() function because it'll block the javascript to update the parent.
      $form['wikicompare_criterions']['#attributes']['style'] = 'display:none;';
    }

    if ($form_type == 'fastaction') {
      $output .= '<div id="container-wikicompare-criterions">';
      $output .= $selected_criterion_itemlist;
      $output .= '</div><div id="wikicompare-criterions" style="display:none;">' . $selected_criterion_hidden . '</div><p>' . render($select_criterion_link) . '</p>';
    }

  }

}





/*****************************************************************
*
*    FASTACTION
*
*****************************************************************/



/**
 * Assign profile specific fields.
 *
 * @param $node
 *   The node which will be submitted. Passed by reference.
 *
 * @param $type
 *   The type of the node.
 *
 * @param $POST
 *   Variables from javascript.
 */
function wikicompare_profiles_fastaction_submit_after(&$node, $type, $POST) {

  if ($type == 'profile') {
    $profile_criterions = array();
    foreach ($POST['profile_criterion_ids'] as $criterion_id) {
      $array = array();
      $array['target_id'] = $criterion_id;
      $array['target_type'] = "node";
      $profile_criterions[] = $array;
    }
    $node->wikicompare_criterions['und'] = $profile_criterions;
  }

}





/*****************************************************************
*
*    GENERATE DEMO
*
*****************************************************************/

/**
 * Get all profiles nodes.
 *
 * @param $output
 *   The html code of the export. Passed by reference.
 */
function wikicompare_profiles_demo_export(&$output, $settings) {

  $output .= "<p>if (module_exists('wikicompare_profiles')) {";
  $output .= "<p>\$profiles = array();</p>";
  //Find all the criterions on the first level of the tree.
  $profiles = request_db('profile', array('parent_id' => NULL, 'dont_translate' => True), $settings);
  foreach ($profiles as $profile) {
    //Get profiles children.
    wikicompare_generate_demo_export_output_node($output, $profile, 'profile', $settings);
  }
  $output .= "}</p>";

}



/**
 * Export profile specific fields.
 *
 * @param $output
 *   The html code of the export. Passed by reference.
 *
 * @param $type
 *   The type of the node.
 *
 * @param $node
 *   The node we are currently exporting.
 */
function wikicompare_profiles_demo_export_specific_fields(&$output, $type, $node) {
  if ($type == 'profile') {
    $i = 0;
    $output .= "\$node->wikicompare_criterions['und'] = array();<br/>";
    foreach($node['profile_criterions'] as $fid) {
      $output .= "\$node->wikicompare_criterions['und'][" . $i . "]['target_id'] = \$criterions['new-" . $fid . "'];<br/>";
      $output .= "\$node->wikicompare_criterions['und'][" . $i . "]['target_type'] = 'node';<br/>";
      $i++;
    }
  }
}



/**
 * Display profile specific field in the generate demo form.
 *
 * @param $form
 *   The generate demo form. Passed by reference.
 */
function wikicompare_profiles_demo_form(&$form) {

  $form['demo_fieldset']['profile_min_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum profile depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => True,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['profile_max_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum profile depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['profile_child_min_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum number of child profile per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['profile_child_max_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of child profile per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['profile_min_criterion_per_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum number of criterions per profiles node'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['profile_max_criterion_per_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of criterions per profiles node'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

}



/**
 * Generate profile demo data.
 *
 * @param $form_state
 *   The values submitted by the form.
 */
function wikicompare_profiles_demo_submit_generate($form_state) {


  $profiles_created = array();

  if (($form_state['input']['profile_min_depth'] != 0) && ($form_state['input']['profile_max_depth'] != 0) && ($form_state['input']['profile_child_min_per_level'] != 0) && ($form_state['input']['profile_child_max_per_level'] != 0)) {

    $criterions_without_children = array();

    $query = db_select('wikicompare_cache_criterion', 'f');
    $query->addField('f', 'nid', 'nid');
    $query->condition("f.has_children", 0);
    $result = $query->execute();
    foreach($result as $record) {
      $criterions_without_children[$record->nid] = $record->nid;
    }

    $settings = array(
      'type' => 'profile',
      'min_depth' => $form_state['input']['profile_min_depth'],
      'max_depth' => $form_state['input']['profile_max_depth'],
      'prefix' => 'Profile ' . variable_get('wikicompare_next_demo_sequence', 1),
      'child_min_per_level' => $form_state['input']['profile_child_min_per_level'],
      'child_max_per_level' => $form_state['input']['profile_child_max_per_level'],
      'min_criterion_per_node' => $form_state['input']['profile_min_criterion_per_node'],
      'max_criterion_per_node' => $form_state['input']['profile_max_criterion_per_node'],
      'criterions_without_children' => $criterions_without_children,
      'depth' => 1,
    );

    if (module_exists('wikicompare_translation')) {
      //Prepare translation specific settings in the generate demo submit.
      wikicompare_translation_demo_submit_settings($settings, $form_state);
    }

    wikicompare_generate_demo_create_children($settings, $profiles_created);

  }

}



/**
 * Generate profile specific fields.
 *
 * @param $node
 *   The node we profile to modify.
 *
 * @param $settings
 *   The settings of the function.
 */
function wikicompare_profiles_demo_submit_specific_fields($node, $settings) {

  if ($settings['type'] == 'profile') {

    if (!empty($settings['criterions_without_children'])) {

      $nb_criterions = rand($settings['min_criterion_per_node'], $settings['max_criterion_per_node']);

      if (!in_array($nb_criterions, array(0,1))) {

        $i_criterions = 0;
        foreach (array_rand($settings['criterions_without_children'], $nb_criterions) as $fid) {
          $node->wikicompare_criterions['und'][$i_criterions]['target_id'] = $fid;
          $node->wikicompare_criterions['und'][$i_criterions]['target_type'] = "node";
          $i_criterions++;
        }
        $node->revision = TRUE;
        $node->revision_moderation = TRUE;

        node_save($node);

        _revisioning_publish_latest_revision($node);

      }
    }

  }

}

?>
