<?php


require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_nodes.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_core_functions.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_comparative_table.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_interface.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare.views_default.inc';

define('WIKICOMPARE_STATE_OPTIONS', serialize(array(
        'new' => 'New',
        'incomplete' => 'Incomplete',
        'submitted' => 'Submitted for publication',
        'published-incomplete' => 'Incomplete - Already published',
        'published-submitted' => 'Submitted - Already published',
        'published' => 'Published',
        'rejected' => 'Rejected',
        'disactivated' => 'Disactivated',
      )));

//The help page of the module
function wikicompare_help($path, $arg) {

  switch ($path) {
    case "admin/help#wikicompare":
      return '<p>' . t("TODO") . '</p>';
      break;
  }

}


//The configuration page of the module
function wikicompare_admin() {

  $form = array();

  $languages = array();
  foreach (language_list() as $key => $language) {
    $languages[$key] = $language->name;
  }

  $form['manage_users'] = array(
    '#type' => 'link',
    '#title' => 'Manage users',
    '#href' => 'admin/people',
  );

  //Display the select button for managing the compared parent update
  $form['wikicompare_main_language'] = array(
    '#type' => 'select',
    '#title' => t('Main language'),
    '#options' => $languages,
    '#default_value' => language_default('language'),
    '#description' => t("Define the main language of the website."),
    '#required' => TRUE,
  );

  $form['temp'] = array(
    '#markup' => 'test' . language_default('language'),
  );


  //Display the select button for managing the compared parent update
  $form['wikicompare_update_compared'] = array(
    '#type' => 'select',
    '#title' => t('Manage parent compared?'),
    '#options' => array(
      'no-update' => t("No update"),
      'update' => t("Update"),
    ),
    '#default_value' => variable_get('wikicompare_update_compared', 'no-update'),
    '#description' => t("Define if the parent compared can also have their own percentage support.<br/> 
In this case, the parent compared will support all the implementation of his children compared, and we will be able to select the parent compared in the comparative table.<br/>
<br/>
Activate this feature can take some time, because the cache table need to be recomputed."),
    '#required' => TRUE,
  );

  //Display the button to flush the caches
  $form['flush_caches'] = array(
    '#type' => 'submit',
    '#suffix' => '<br/>If you ever corrupt your data, you can use this button to recompute all the percentages.<br/>This operation may take some time.',
    '#value' => t('Flush caches'),
    '#button_type' => 'button',
    '#submit' => array('wikicompare_flush_caches'),
  );

  $form['#submit'][] = 'submit_settings';

  if (module_exists('wikicompare_generate_demo')) {
    wikicompare_generate_demo_wikicompare_settings_page($form);
  }

  return system_settings_form($form);

}

//This function handels the submit of the settings form.
function submit_settings($form, $form_state) {

  if ($form_state['input']['wikicompare_main_language'] != language_default('language')) {

    $languages = language_list();
    $old_key = language_default('language');
    $new_key = $form_state['input']['wikicompare_main_language'];

    $old_ids = array();
    $res = array();

    $types = array('compared', 'feature', 'implementation');


    if (module_exists('wikicompare_needs')) {
      wikicompare_needs_wikicompare_node_types($array);
    }

    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.language', $old_key);
    $query->condition('n.type', $types, 'in');


    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_wikicompare_settings_change_language_request($query, $new_key);
    }

    $result = $query->execute();
    foreach ($result as $record) {
      $old_ids[$record->nid] = $record->nid;
      $res[$record->nid] = $record;
    }


    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_wikicompare_settings_change_language($old_ids, $res);
    }

    if (!empty($old_ids)) {
      db_update('node')
        ->fields(array(
          'language' => $new_key,
        ))
        ->condition('nid', $old_ids, 'IN')
        ->execute();
    }

    variable_set('language_default', $languages[$new_key]);

  }

  if ($form_state['input']['wikicompare_update_compared'] == 'update' && variable_get('wikicompare_update_compared', 'no-update') == 'no-update') {
    wikicompare_flush_caches();
  }

  //Allow others modules to modify the action when we submit the settings page
  foreach (module_implements('wikicompare_submit_settings_page') as $module) {
    $function = $module . '_wikicompare_submit_settings_page';
    $function($form, $form_state);
  }

}

/**
 * Implements hook_menu().
 * This function create new menu in Drupal
 */
function wikicompare_menu() {

  $items = array();

  //Enable module settings page
  $items['admin/config/wikicompare'] = array(
    'title' => 'Wikicompare module settings',
    'description' => 'Wikicompare module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wikicompare_admin'),
    'access arguments' => array('administer wikicompare'),
    'type' => MENU_NORMAL_ITEM,
   );

  //Enable comparative table URL
  $items['compare'] = array(
    'title' => 'Comparative Table',
    'description' => 'Comparative Table',
    'page callback' => 'wikicompare_comparative_table',
    'access callback' => TRUE,
    'menu_name' => 'main-menu',
    'weight' => 0,
    'file' => 'wikicompare_comparative_table.inc',
  );


  $items['admin/config/wikicompare'] = array(
    'title' => 'Administration',
    'description' => 'Wikicompare Administration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wikicompare_admin'),
    'access arguments' => array('administer wikicompare'),
    'menu_name' => 'main-menu',
    'weight' => 10,
  ); 


  $items['get_item_list_children_callback'] = array(
    'page callback' => 'get_item_list_children_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['get_feature_callback'] = array(
    'page callback' => 'get_feature_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['toogle_compared_checkbox_callback'] = array(
    'page callback' => 'toggle_compared_checkbox_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  $items['get_dialog_callback/%/%/%/%/%/%'] = array(
    'page callback' => 'get_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(1,2,3,4,5,6),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
  );

  $items['select_dialog_callback'] = array(
    'page callback' => 'select_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['submit_dialog_callback'] = array(
    'page callback' => 'submit_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['compute_comparative_table_callback'] = array(
    'page callback' => 'compute_comparative_table_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['make_cleaning_callback'] = array(
    'page callback' => 'make_cleaning_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );


  $items['get_fastaction_form_callback'] = array(
    'page callback' => 'get_fastaction_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_interface.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  $items['submit_fastaction_form_callback'] = array(
    'page callback' => 'submit_fastaction_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_interface.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  return $items;
}

function wikicompare_permission() {
  return array(
    'administer wikicompare' => array(
      'title' => t('Administer Wikicompare'),
      'restrict access' => TRUE,
    ),
    'moderate wikicompare' => array(
      'title' => t('Moderate Wikicompare'),
      'restrict access' => TRUE,
    ),
  );
}


function wikicompare_block_info_alter(&$blocks, $theme, $code_blocks) {


  $blocks['system']['navigation']['region'] = -1;
  $blocks['system']['management']['region'] = -1;

}


function wikicompare_library() {
  $path = drupal_get_path('module', 'wikicompare');

  $libraries['wikicompare_comparative_table'] = array(
    'title' => 'Wikicompare Table',
    'version' => '1.0',
    'js' => array(
       $path . "/js/wikicompare_comparative_table.js" => array(),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_node_info().
 * This function create the new node type we need for the module
 */
function wikicompare_node_info() {
  return array(
    'feature' => array(
      'name' => t('Feature'),
      'base' => 'feature',
      'description' => t('TODO : Feature description'),
      'help' => t('TODO : Features submission guidelines'),
      'title_label' => t('Title'),
    ),

    'compared' => array(
      'name' => t('Compared'),
      'base' => 'compared',
      'description' => t('TODO'),
      'help' => t('TODO'),
      'title_label' => t('Title'),
    ),

    'implementation' => array(
      'name' => t('Implementation'),
      'base' => 'implementation',
      'description' => t('TODO'),
      'help' => t('TODO'),
      'title_label' => t('Title'),
    ),


  );
}


/**
 * Implements hook_theme().
 */
/*
function wikicompare_theme() {
  return array(
    // Theme function for the compare table
    'wikicompare_comparative_table' => array(
      'render element' => 'form',
      'file' => 'wikicompare_comparative_table.inc',
    ),
  );
}
*/


?>
