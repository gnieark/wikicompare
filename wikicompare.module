<?php

/**
 * @file
 * Define the main hooks for the wikicompare module.
 */

/**
 * Include the other files.
 */
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_core_functions.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_nodes.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_comparative_table.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_interface.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare.views_default.inc';

//Constant containing all state values.
define('WIKICOMPARE_STATE_OPTIONS', serialize(array(
        'new' => 'New',
        'incomplete' => 'Incomplete',
        'submitted' => 'Submitted for publication',
        'published-incomplete' => 'Incomplete - Already published',
        'published-submitted' => 'Submitted - Already published',
        'published' => 'Published',
        'rejected' => 'Rejected',
        'disactivated' => 'Disactivated',
      )));

define('WIKICOMPARE_STATE_PUBLISHED', serialize(array(
        'published-incomplete',
        'published-submitted',
        'published'
      )));

/**
 * Implements hook_help().
 * This function create the help page for the module.
 */
function wikicompare_help($path, $arg) {

  switch ($path) {
    case "admin/help#wikicompare":
      return '<p>' . t("TODO") . '</p>';
      break;
  }

}



/**
 * Implements hook_node_info().
 * This function create the new node types we need for the module.
 */
function wikicompare_node_info() {
  return array(
    'criterion' => array(
      'name' => t('Criterion'),
      'base' => 'criterion',
      'title_label' => t('Title'),
    ),

    'product' => array(
      'name' => t('Product'),
      'base' => 'product',
      'title_label' => t('Title'),
    ),

    'evaluation' => array(
      'name' => t('Evaluation'),
      'base' => 'evaluation',
      'title_label' => t('Title'),
    ),


  );
}



/**
 * Implements hook_menu().
 * This function create new menu in Drupal and also declare the ajax callback.
 */
function wikicompare_menu() {

  $items = array();

  //Enable home page URL
  $items['home'] = array(
    'title' => 'Home',
    'description' => 'Home Page',
    'page callback' => 'wikicompare_home_page',
    'access callback' => TRUE,
    'menu_name' => 'main-menu',
    'weight' => 0,
    'file' => 'wikicompare_comparative_table.inc',
  );

  //Enable comparative table URL
  $items['compare/%/%/%/%'] = array(
    'title' => 'Comparative Table',
    'description' => 'Comparative Table',
    'page callback' => 'wikicompare_comparative_table',
    'page arguments' => array(1,2,3,4),
    'access callback' => TRUE,
    'file' => 'wikicompare_comparative_table.inc',
  );

  //Add an access to users management for moderators.
  $items['admin/people/people'] = array(
    'title' => 'Manage Users',
    'description' => 'Find and manage people interacting with your site.',
    'access arguments' => array('administer users'),
    'menu_name' => 'main-menu',
    'weight' => 9,
  );

  //Add an access to wikicompare admin page in the main menu.
  $items['admin/config/wikicompare'] = array(
    'title' => 'Administration',
    'description' => 'Wikicompare Administration',
    'page callback' => 'drupal_get_form',
    //Only the wikiadmin can access the page.
    'page arguments' => array('wikicompare_admin'),
    'access arguments' => array('administer wikicompare'),
    'menu_name' => 'main-menu',
    'weight' => 10,
  );

  //Define ajax callback used in adminstration to manage informative fields.
  $items['wikicompare_get_admin_infofield_form_callback'] = array(
    'page callback' => 'wikicompare_get_admin_infofield_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('administer wikicompare'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  //Define ajax callback used in adminstration to submit informative fields.
  $items['wikicompare_admin_infofield_submit_callback'] = array(
    'page callback' => 'wikicompare_admin_infofield_submit_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'), //TODO administer wikicompare'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  //Define ajax callback used in comparative table and in form.
  $items['wikicompare_get_itemlist_children_callback'] = array(
    'page callback' => 'wikicompare_get_itemlist_children_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_get_criterion_children_callback'] = array(
    'page callback' => 'wikicompare_get_criterion_children_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_get_append_product_list_callback'] = array(
    'page callback' => 'wikicompare_get_append_product_list_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_toogle_product_checkbox_callback'] = array(
    'page callback' => 'wikicompare_toggle_product_checkbox_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_get_dialog_callback'] = array(
    'page callback' => 'wikicompare_get_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_select_dialog_callback'] = array(
    'page callback' => 'wikicompare_select_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_submit_dialog_callback'] = array(
    'page callback' => 'wikicompare_submit_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_compute_table_callback'] = array(
    'page callback' => 'wikicompare_compute_table_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_make_cleaning_callback'] = array(
    'page callback' => 'wikicompare_make_cleaning_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_table_fastaction_form_callback'] = array(
    'page callback' => 'wikicompare_table_fastaction_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_interface.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['wikicompare_table_fastaction_submit_callback'] = array(
    'page callback' => 'wikicompare_table_fastaction_submit_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_interface.inc',
    'delivery callback' => 'ajax_deliver',
  );

  return $items;

}



/**
 * Implements hook_permission().
 * Add new permission specific to wikicompare.
 */
function wikicompare_permission() {
  return array(
    'administer wikicompare' => array(
      'title' => t('Administer Wikicompare'),
      'restrict access' => TRUE,
    ),
    'moderate wikicompare' => array(
      'title' => t('Moderate Wikicompare'),
      'restrict access' => TRUE,
    ),
  );
}



/**
 * Implements hook_library().
 * Add wikicompare javascript file.
 */
function wikicompare_library() {
  $path = drupal_get_path('module', 'wikicompare');

  $libraries['wikicompare_global'] = array(
    'title' => 'Wikicompare Global',
    'version' => '1.0',
    'js' => array(
       $path . "/js/wikicompare_global.js" => array(),
    ),
  );

  $libraries['wikicompare_comparative_table'] = array(
    'title' => 'Wikicompare Table',
    'version' => '1.0',
    'js' => array(
       $path . "/js/wikicompare_comparative_table.js" => array(),
    ),
  );

  $libraries['chart'] = array(
    'title' => 'chart',
    'version' => '0.2',
    'js' => array(
       $path . "/js/Chart.js" => array(),
    ),
  );

  $libraries['mCustomScrollbar'] = array(
    'title' => 'mCustomScrollbar',
    'version' => '2.8.2',
    'js' => array(
       $path . "/js/jquery.mCustomScrollbar.concat.min.js" => array(),
    ),
  );

  $libraries['mousewheel'] = array(
    'title' => 'mousewheel',
    'version' => '3.1.3',
    'js' => array(
       $path . "/js/jquery.mousewheel.js" => array(),
    ),
  );

  return $libraries;
}



/**
 * Implements hook_init().
 * Perform instructions on any pages.
 */
function wikicompare_init() {
  drupal_add_library('wikicompare', 'wikicompare_global');
}



/**
 * Implements hook_block_info_alter().
 * Remove navigation and management block from the wikicompare interface.
 */
function wikicompare_block_info_alter(&$blocks, $theme, $code_blocks) {


  $blocks['system']['navigation']['region'] = -1;
  $blocks['system']['management']['region'] = -1;

}



/**
 * Implements hook_admin().
 * This function create the configuration page of wikicompare.
 */
function wikicompare_admin() {

  $form = array();

  $form['#attached']['js'][] = '/misc/ajax.js';
  $form['#attached']['js'][] = '/misc/progress.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'wikicompare') . '/js/wikicompare_comparative_table.js';

  //Add an hyperlink to redirect the wikicompare administrator to the manage users page.
  $form['manage_users'] = array(
    '#type' => 'link',
    '#title' => 'Manage users',
    '#href' => 'admin/people',
  );

  //Get all available languages to insert them as options of the select field.
  $languages = array();
  foreach (language_list() as $key => $language) {
    $languages[$key] = $language->name;
  }

  //Display the select button to manage the main language of the wikicompare.
  $form['wikicompare_main_language'] = array(
    '#type' => 'select',
    '#title' => t('Main language'),
    '#options' => $languages,
    '#default_value' => language_default('language'),
    '#description' => t("Define the main language of the website."),
    '#required' => TRUE,
  );

  //Display the cache status.
  $form['wikicompare_computation_status'] = array(
    '#type' => 'select',
    '#title' => t('Computation status'),
    '#options' => array(
      0 => t("Computation disactivated"),
      1 => t("Computation activated"),
    ),
    '#default_value' => variable_get('wikicompare_computation_status', 1),
    '#description' => t("Change the status of the computation, if you need to perform quickly some changes in the table without having the time needed to compute the percentage.
        <br/>
        Note that no percentage will be visible in the table while the computation is disactivated."),
    '#required' => TRUE,
  );

  //Display the button to flush the caches.
  $form['flush_caches'] = array(
    '#type' => 'submit',
    '#suffix' => '<br/>If you ever corrupt your data, you can use this button to recompute all the percentages.<br/>This operation may take some time.<br/>',
    '#value' => t('Flush caches'),
    '#button_type' => 'button',
    '#submit' => array('wikicompare_refresh_caches'),
  );

  //Display the infofield table.
  $form['infofields_table'] = array(
    '#markup' => wikicompare_admin_infofield_table()
  );

  //Add the ajax link to call the infofield form.
  $form['add_infofield'] = array(
    '#type' => 'link',
    '#title' => 'Add',
    '#href' => 'wikicompare_get_admin_infofield_form_callback/nojs',
    '#id' => 'admin_add_infofield',
    '#attributes' => array(
      'class' => array('dialog'),
      'action' => 'infofields',
      'context' => 'add',
      'side' => 'right',
    ),
  );

  $form['#submit'][] = 'submit_settings';

  if (module_exists('wikicompare_generate_demo')) {
    //Add the elements relatives to the demo generation.
    wikicompare_generate_demo_settings_page($form);
  }

  return system_settings_form($form);

}

//This function handle the submit of the settings form.
function submit_settings($form, $form_state) {

  //If we change the main language of the wikicompare.
  if ($form_state['input']['wikicompare_main_language'] != language_default('language')) {

    $languages = language_list();
    $old_key = language_default('language');
    $new_key = $form_state['input']['wikicompare_main_language'];

    $old_ids = array();
    $res = array();

    //For all wikicompare types.
    $types = array('product', 'criterion', 'evaluation');
    if (module_exists('wikicompare_profiles')) {
      //Add profile type.
      wikicompare_profiles_node_types($array);
    }

    //Get all the old nodes.
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.language', $old_key);
    $query->condition('n.type', $types, 'in');

    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_settings_change_language_request($query, $new_key);
    }

    $result = $query->execute();
    foreach ($result as $record) {
      $old_ids[$record->nid] = $record->nid;
      $res[$record->nid] = $record;
    }

    if (module_exists('wikicompare_translation')) {
      //Assign the fields of the old node to the new node, and define the translated node as the new main language node.
      wikicompare_translation_settings_change_language($old_ids, $res);
    }

    //Change the languages of the old node.
    if (!empty($old_ids)) {
      db_update('node')
        ->fields(array(
          'language' => $new_key,
        ))
        ->condition('nid', $old_ids, 'IN')
        ->execute();
    }

    //Change the main language of the wikicompare.
    variable_set('language_default', $languages[$new_key]);

  }

  if ($form_state['input']['wikicompare_computation_status'] == 0 && variable_get('wikicompare_computation_status', 1) == 1) {
    wikicompare_stop_computation();
  }

  if ($form_state['input']['wikicompare_computation_status'] == 1 && variable_get('wikicompare_computation_status', 1) == 0) {
    wikicompare_start_computation();
  }

  if (module_exists('wikicompare_generate_demo')) {
    //Create demo data.
    wikicompare_generate_demo_submit_settings_page($form, $form_state);
  }

}



/**
 * Render the infofield table.
 *
 * @return The rendered infofields table.
 */
function wikicompare_admin_infofield_table() {

  $rows = array();
  //Get all infofields data.
  $query = db_select('wikicompare_infofields', 'f');
  $query->addField('f', 'name', 'name');
  $query->addField('f', 'title', 'title');
  $query->addField('f', 'type', 'type');
  $query->addField('f', 'sequence', 'sequence');
  $query->addField('f', 'is_required', 'is_required');
  $query->addField('f', 'is_active', 'is_active');
  $query->addField('f', 'is_home', 'is_home');
  $query->addField('f', 'is_filter', 'is_filter');
  $query->addField('f', 'filter_type', 'filter_type');
  $query->addField('f', 'category', 'category');
  $query->addField('f', 'category_sequence', 'category_sequence');
  $query->orderby('f.category_sequence');
  $query->orderby('f.category');
  $query->orderby('f.sequence');
  $query->orderby('f.name');
  $result = $query->execute();
  foreach ($result as $record) {
    //Generate the edit link.
    $img = theme('image', array(
      'path' => drupal_get_path('theme',$GLOBALS['theme']) . '/images/add.png',
      'alt' => t('Edit'),
      'height' => '100%',
    ));
    //Create the link. The html = True indicate that the title of the link contain html.
    $img_link_edit = l($img, 'wikicompare_get_admin_infofield_form_callback/nojs', array('attributes' => array('id' => 'admin_edit_infofield_' . $record->name, 'class' => array('dialog'), 'side' => 'right', 'action' => 'infofields', 'context' => 'edit', 'field' => $record->name), 'html' => True));

    //Generate the remove link.
    $img = theme('image', array(
      'path' => drupal_get_path('theme',$GLOBALS['theme']) . '/images/add.png',
      'alt' => t('Remove'),
      'height' => '100%',
    ));
    //Create the link. The html = True indicate that the title of the link contain html.
    $img_link_remove = l($img, 'wikicompare_get_admin_infofield_form_callback/nojs', array('attributes' => array('id' => 'admin_remove_infofield_' . $record->name, 'class' => array('dialog'), 'side' => 'right', 'action' => 'infofields', 'context' => 'remove', 'field' => $record->name), 'html' => True));

    //If we are not in select type, filter_type is irrelevent.
    if ($record->type != 'select') {
      $record->filter_type = '';
    }

    //Prepare the row data.
    $rows[] = array($record->category, $record->category_sequence, $record->name, $record->title, $record->type, $record->sequence, $record->is_required, $record->is_active, $record->is_home, $record->is_filter, $record->filter_type, $img_link_edit, $img_link_remove);
  }

  $header = array('Category', 'Category Sequence', 'Name', 'Title', 'Type', 'Sequence', 'Is required', 'Is active', 'Is on home', 'Is filter', 'Filter type', 'Edit', 'Remove');

  //Render the table and return it.
  return theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'infofields_table'), 'caption' => '', 'colgroups' => array(), 'sticky' => '', 'empty' => 'No fields for now'));

}



/**
 * Ajax callback function called by javascript to display the infofield form.
 *
 * @param $method
 *   Indicate if the call was made with javascript or if it's a simple browser call.
 *
 * @param $_POST
 *   The variables send by the javascript.
 *
 * @return $page
 *   Array containing the instructions for the javascript.
 */
function wikicompare_get_admin_infofield_form_response($method = 'ajax') {

  //If javascript isn't activated on the browser, the first argument will not be transformed in ajax value. In such case, we just redirect to an error message.
  if ($method != 'ajax') {
    $output = NOJS_MESSAGE;
    return $output;
  }

  $form = array();

  //Display the name field.
  $form['name_field'] = array(
    '#type' => 'textfield',
    '#id' => 'form_infofield_name',
    '#title' => t('Name'),
    '#required' => TRUE,
  );

  if ($_POST['context'] == 'remove') {

    //Display the warning message before removing the field.
    $form['warning'] = array(
      '#markup' => '<p>Are your sure you want to remove this field? All data from this field will be deleted and you will not be able to recover it.<br/>You may consider to disactivate it instead.</p>',
    );

  //If we are adding or editing the field.
  } else {

    //Display the title field.
    $form['title_field'] = array(
      '#type' => 'textfield',
      '#id' => 'form_infofield_title',
      '#title' => t('Title'),
      '#required' => TRUE,
    );

    //Display the type field.
    $form['type_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_type',
      '#title' => t('Type'),
      '#options' => array(
        'text' => t('Text'),
        'number' => t('Number'),
        'select' => t('Select'),
      ),
      '#default_value' => 'text',
      '#required' => TRUE,
    );

    //Display the allowed value field.
    $form['allowed_values_field'] = array(
      '#type' => 'textarea',
      '#id' => 'form_infofield_allowed_values',
      '#title' => t('Values'),
      '#prefix' => '<div id="allowed_values_field_div">',
      '#suffix' => '</div>',
    );

    //Display the sequence field.
    $form['sequence_field'] = array(
      '#type' => 'textfield',
      '#id' => 'form_infofield_sequence',
      '#title' => t('Sequence'),
      '#value' => 1,
      '#size' => 3,
      '#maxlength' => 3,
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive_or_null'),
    );

    //Display the is_required field.
    $form['is_required_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_is_required',
      '#title' => t('Is required?'),
      '#options' => array(
        0 => t("No"),
        1 => t("Yes"),
      ),
      '#value' => 0,
      '#required' => TRUE,
    );

    //Display the is_active field.
    $form['is_active_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_is_active',
      '#title' => t('Is active?'),
      '#options' => array(
        0 => t("No"),
        1 => t("Yes"),
      ),
      '#value' => 1,
      '#required' => TRUE,
    );

    //Display the is_home field.
    $form['is_home_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_is_home',
      '#title' => t('Is on home?'),
      '#options' => array(
        0 => t("No"),
        1 => t("Yes"),
      ),
      '#value' => 0,
      '#required' => TRUE,
    );

    //Display the is_filter field.
    $form['is_filter_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_is_filter',
      '#title' => t('Is a filter?'),
      '#options' => array(
        0 => t("No"),
        1 => t("Yes"),
      ),
      '#value' => 0,
      '#required' => TRUE,
    );

    //Display the filter type field.
    $form['filter_type_field'] = array(
      '#type' => 'select',
      '#id' => 'form_infofield_filter_type',
      '#title' => t('Filter Type'),
      '#options' => array(
        'select' => t('Select'),
        'checkboxes' => t('Checkboxes'),
      ),
      '#default_value' => 'select',
      '#required' => TRUE,
      '#prefix' => '<div id="filter_type_field_div">',
      '#suffix' => '</div>',
    );

    //Display the category field.
    $form['category_field'] = array(
      '#type' => 'textfield',
      '#id' => 'form_infofield_category',
      '#title' => t('Category'),
      '#required' => TRUE,
    );

    //Display the category sequence field.
    $form['category_sequence_field'] = array(
      '#type' => 'textfield',
      '#id' => 'form_infofield_category_sequence',
      '#title' => t('Sequence category'),
      '#value' => 1,
      '#size' => 3,
      '#maxlength' => 3,
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive_or_null'),
    );

    $test_allowed_values = False;
    //If we are editing, we get the current value from database.
    if ($_POST['context'] == 'edit') {
      $query = db_select('wikicompare_infofields', 'f');
      $query->addField('f', 'name', 'name');
      $query->addField('f', 'title', 'title');
      $query->addField('f', 'type', 'type');
      $query->addField('f', 'allowed_values', 'allowed_values');
      $query->addField('f', 'sequence', 'sequence');
      $query->addField('f', 'is_required', 'is_required');
      $query->addField('f', 'is_active', 'is_active');
      $query->addField('f', 'is_home', 'is_home');
      $query->addField('f', 'is_filter', 'is_filter');
      $query->addField('f', 'filter_type', 'filter_type');
      $query->addField('f', 'category', 'category');
      $query->addField('f', 'category_sequence', 'category_sequence');
      $query->condition('f.name', $_POST['field']);
      $result = $query->execute();
      foreach ($result as $record) {
        //Assign current value to the form.
        $form['title_field']['#value'] = $record->title;
        $form['type_field']['#value'] = $record->type;
        $form['allowed_values_field']['#value'] = $record->allowed_values;
        $form['sequence_field']['#value'] = $record->sequence;
        $form['is_required_field']['#value'] = $record->is_required;
        $form['is_active_field']['#value'] = $record->is_active;
        $form['is_home_field']['#value'] = $record->is_home;
        $form['is_filter_field']['#value'] = $record->is_filter;
        $form['filter_type_field']['#value'] = $record->filter_type;
        $form['category_field']['#value'] = $record->category;
        $form['category_sequence_field']['#value'] = $record->category_sequence;
      }

      //In editing mode, we can't modify type anymore.
      $form['type_field']['#attributes']['disabled'] = True;

      //We will display the allowed values field if we are in select mode.
      if ($record->type == 'select') {
        $test_allowed_values = True;
      }

    }

    //Unless exception, we hide the allowed values field on loading.
    if (!$test_allowed_values) {
      $form['allowed_values_field']['#prefix'] = '<div id="allowed_values_field_div" style="display:none;">';
      $form['filter_type_field']['#prefix'] = '<div id="filter_type_field_div" style="display:none;">';
    }

  }

  //Prepare the error zone.
  $form['error_zone'] = array(
    '#markup' => '<div id ="error_zone"></div>',
  );

  //Prepare the submit button, with his ajax link.
  $form['submit'] = array(
    '#type' => 'link',
    '#title' => 'submit',
    '#href' => 'wikicompare_admin_infofield_submit_callback/nojs/',
    '#id' => 'submit_infofield',
    '#prefix' => '<input id="submit_infofield_button" type="submit" link="submit_infofield" value="Submit" class="button wikicompare_button"/>',
    '#attributes' => array(
      'class' => array('simple_ajaxlink'),
      'action' => 'submit_infofield',
      'context' => $_POST['context'],
      'style' => 'display:none',
    )
  );

  //If we are not adding a new field, we set the name and make it readonly.
  if (in_array($_POST['context'], array('edit', 'remove'))) {
    $form['name_field']['#value'] = $_POST['field'];
    $form['name_field']['#attributes']['disabled'] = True;
  }

  $commands = array();
  //Add the form to the dialog.
  $commands[] = ajax_command_append('#' . $_POST['side'] . '_dialog', render($form));

  //Return the javascript commands.
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return $page;

}



/**
 * Ajax callback function called by javascript to submit the infofield form.
 *
 * @param $method
 *   Indicate if the call was made with javascript or if it's a simple browser call.
 *
 * @param $_POST
 *   The variables send by the javascript.
 *
 * @return $page
 *   Array containing the instructions for the javascript.
 */
function wikicompare_admin_infofield_submit_response($method = 'ajax'){

  //If javascript isn't activated on the browser, the first argument will not be transformed in ajax value. In such case, we just redirect to an error message.
  if ($method != 'ajax') {
    $output = NOJS_MESSAGE;
    return $output;
  }

  //Security to avoid hacking.
  $user = $GLOBALS['user'];
  if (!user_access('administer wikicompare', $user)) {
    return "You do not have the right to modify info fields structure.";
  }

  if ($_POST['context'] == 'remove') {

    //Delete the field.
    field_delete_field('wikicf_' . $_POST['name']);

    //Delete in wikicompare table.
    db_delete('wikicompare_infofields')
      ->condition('name', $_POST['name'])
      ->execute();

  //If we are adding or editing.
  } else {

    //Verify that all required field are filled.
    if (!$_POST['name'] || !$_POST['title'] || !$_POST['sequence'] || !$_POST['category'] || !$_POST['category_sequence']) {
      $commands = array();
      $commands[] = ajax_command_html('#error_zone', 'Some fields are missing');
      $page = array('#type' => 'ajax', '#commands' => $commands);
      return $page;
    }

    //Verify that the field doesn't already exist.
    if ($_POST['context'] == 'add') {
      $flag = False;
      //Name is reserved since we use it for the name filter in home page.
      if ($_POST['name'] == 'name') {
        $flag = True;
      }
      $query = db_select('wikicompare_infofields', 'f');
      $query->addField('f', 'name', 'name');
      $query->condition('f.name', $_POST['name']);
      $result = $query->execute();
      foreach ($result as $record) {
        $flag = True;
      }

      if ($flag) {
        $commands = array();
        $commands[] = ajax_command_html('#error_zone', $_POST['name'] . ' already exist.');
        $page = array('#type' => 'ajax', '#commands' => $commands);
        return $page;
      }

    }

    //Validate the name.
    if (!preg_match('#^[a-z_]+$#', $_POST['name'])) {
      $commands = array();
      $commands[] = ajax_command_html('#error_zone', 'Only small letter an _ are accepted in the name.');
      $page = array('#type' => 'ajax', '#commands' => $commands);
      return $page;
    }

    //Validate the sequence fields.
    foreach (array($_POST['sequence'], $_POST['category_sequence']) as $value) {
      if (!is_numeric($value) || intval($value) != $value || $value < 0) {
        $commands = array();
        $commands[] = ajax_command_html('#error_zone', 'The sequence must be positive integer only.');
        $page = array('#type' => 'ajax', '#commands' => $commands);
        return $page;
      }
    }

    //Create or modify the field.
    wikicompare_admin_infofield_modify($_POST);

  }

  $commands = array();
  //Close the dialog.
  $commands[] = ajax_command_invoke('#right_dialog_close', 'click');
  //Update the table.
  $commands[] = ajax_command_html('#infofields_table', wikicompare_admin_infofield_table());

  //Return the javascript commands.
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return $page;

}

/**
 * Create of modify the infofield. This function is used when we submit the form in admin, or in generate_data module.
 *
 * @param $_POST
 *   Array containing the data to insert/update.
 */
function wikicompare_admin_infofield_modify($POST) {

    $field = array();
    $instance = array();

    //Load field and instance from Drupal.
    if ($POST['context'] == 'edit') {
      $field = field_info_field('wikicf_' . $POST['name']);
      $instance = field_info_instance('node', 'wikicf_' . $POST['name'], 'product');
    }

    //Only while adding, set the fields we can't modify later.
    if ($POST['context'] == 'add') {
      $field['field_name'] = 'wikicf_' . $POST['name'];
      $field['cardinality'] = 1;
      $instance['field_name'] = 'wikicf_' . $POST['name'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'product';
    }

    $instance['label'] = $POST['title']; //TODO manage translation of the title
    $instance['required'] = $POST['is_required'];

    //Set the type specific settings.
    switch ($POST['type']) {
      case 'text':
        if ($POST['context'] == 'add') {
          $field['type'] = 'text';
        }
        $field['settings'] =  array(
          'max_length' => '255',
        );
        $instance['widget'] = array(
          'settings' => array(
            'size' => '255',
          ),
          'type' => 'text_textfield',
        );
        break;
      case 'number':
        if ($POST['context'] == 'add') {
          $field['type'] = 'number_integer';
        }
        $field['settings'] =  array(
          'max_length' => '255',
        );
        $instance['widget'] = array(
          'type' => 'number',
        );
        $instance['default_value'] = array(
          0 => array(
            'value' => 0,
          )
        );
        break;
      case 'select':
        if ($POST['context'] == 'add') {
          $field['type'] = 'list_text';
        }

        //Transform the text field into exploitable array.
        $POST['allowed_values'] = str_replace("\n\r", "\n", $POST['allowed_values']);
        $allowed_values = array();
        foreach(explode("\n", $POST['allowed_values']) as $value) {
          $allowed_values[$value] = $value;
        }

        $field['settings'] =  array(
          'allowed_values' => $allowed_values
        );
        $instance['default_value'] = array(
          0 => array(
            'value' => 0,
          ),
        );
        $instance['widget'] = array(
          'type' => 'options_select',
        );
        break;
    }

    //Create or update the drupal field.
    if ($POST['context'] == 'add') {
      field_create_field($field);
      field_create_instance($instance);
    } else {
      field_update_field($field);
      field_update_instance($instance);
    }

    //Prepare the field for the wikicompare table, and insert/update it.
    $fields = array(
      'name' => $POST['name'],
      'title' => $POST['title'],
      'type' => $POST['type'],
      'allowed_values' => $POST['allowed_values'],
      'sequence' => $POST['sequence'],
      'is_required' => $POST['is_required'],
      'is_active' => $POST['is_active'],
      'is_home' => $POST['is_home'],
      'is_filter' => $POST['is_filter'],
      'filter_type' => $POST['filter_type'],
      'category' => $POST['category'],
      'category_sequence' => $POST['category_sequence'],
    );

    if ($POST['context'] == 'add') {
      db_insert('wikicompare_infofields')
        ->fields($fields)
        ->execute();
    } else {
      db_update('wikicompare_infofields')
        ->fields($fields)
        ->condition('name', $POST['name'])
        ->execute();
    }

    //When we modify the sequence of a category, the sequence change for all item with this category.
    db_update('wikicompare_infofields')
      ->fields(array(
        'category_sequence' => $POST['category_sequence'],
      ))
      ->condition('category', $POST['category'])
      ->execute();
}

?>
