<?php


require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_nodes.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_core_functions.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare_comparative_table.inc';
require_once drupal_get_path('module', 'wikicompare') . '/wikicompare.views_default.inc';

define('WIKICOMPARE_STATE_OPTIONS', serialize(array(
        'new' => 'New',
        'incomplete' => 'Incomplete',
        'submitted' => 'Submitted for publication',
        'published-incomplete' => 'Incomplete - Already published',
        'published-submitted' => 'Submitted - Already published',
        'published' => 'Published',
        'rejected' => 'Rejected',
        'disactivated' => 'Disactivated',
      )));

//The help page of the module
function wikicompare_help($path, $arg) {

  switch ($path) {
    case "admin/help#wikicompare":
      return '<p>' . t("TODO") . '</p>';
      break;
  }

}


//The configuration page of the module
function wikicompare_admin() {

  $form = array();

  $languages = array();
  foreach (language_list() as $key => $language) {
    $languages[$key] = $language->name;
  }
  //Display the select button for managing the compared parent update
  $form['wikicompare_main_language'] = array(
    '#type' => 'select',
    '#title' => t('Main language'),
    '#options' => $languages,
    '#default_value' => language_default('language'),
    '#description' => t("Define the main language of the website."),
    '#required' => TRUE,
  );

  $form['temp'] = array(
    '#markup' => 'test' . language_default('language'),
  );


  //Display the select button for managing the compared parent update
  $form['wikicompare_update_compared'] = array(
    '#type' => 'select',
    '#title' => t('Manage parent compared?'),
    '#options' => array(
      'no-update' => t("No update"),
      'update' => t("Update"),
    ),
    '#default_value' => variable_get('wikicompare_update_compared', 'no-update'),
    '#description' => t("Define if the parent compared can also have their own percentage support.<br/> 
In this case, the parent compared will support all the implementation of his children compared, and we will be able to select the parent compared in the comparative table.<br/>
<br/>
Activate this feature can take some time, because the cache table need to be recomputed."),
    '#required' => TRUE,
  );

  //Display the button to flush the caches
  $form['flush_caches'] = array(
    '#type' => 'submit',
    '#suffix' => '<br/>If you ever corrupt your data, you can use this button to recompute all the percentages.<br/>This operation may take some time.',
    '#value' => t('Flush caches'),
    '#button_type' => 'button',
    '#submit' => array('wikicompare_flush_caches'),
  );

  $form['#submit'][] = 'submit_settings';

  //Allow others modules to modify the settings page
  foreach (module_implements('wikicompare_settings_page') as $module) {
    $function = $module . '_wikicompare_settings_page';
    $function($form);
  }

  return system_settings_form($form);

}

//This function handels the submit of the settings form.
function submit_settings($form, $form_state) {

  if ($form_state['input']['wikicompare_main_language'] != language_default('language')) {
//TODO Intervertir les translation_source entre les nodes, réassigner les champs perso et les implementation sur le nouveau node referent. Si node du nouveau language non existant, changer le langage du precedent.
    $languages = language_list();
    $old_key = language_default('language');
    $new_key = $form_state['input']['wikicompare_main_language'];

    $old_ids = array();
    $res = array();

    $types = array('compared', 'feature', 'implementation');
    foreach (module_implements('wikicompare_node_types') as $module) {
      $function = $module . '_wikicompare_node_types';
      $function($array);
    }

    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.language', $old_key);
    $query->condition('n.type', $types, 'in');

/*
    foreach (module_implements('wikicompare_settings_change_language_request') as $module) {
      $function = $module . '_wikicompare_settings_change_language_request';
      $function($query, $new_key);
    }
*/

    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_wikicompare_settings_change_language_request($query, $new_key);
    }

    $result = $query->execute();
    foreach ($result as $record) {
      $old_ids[$record->nid] = $record->nid;
      $res[$record->nid] = $record;
    }
/*
    //Allow others modules to update others implementations
    foreach (module_implements('wikicompare_settings_change_language') as $module) {
      $function = $module . '_wikicompare_settings_change_language';
      $function($old_ids, $res);
    }
*/

    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_wikicompare_settings_change_language($old_ids, $res);
    }

    if (!empty($old_ids)) {
      db_update('node')
        ->fields(array(
          'language' => $new_key,
        ))
        ->condition('nid', $old_ids, 'IN')
        ->execute();
    }

    variable_set('language_default', $languages[$new_key]);

  }

  if ($form_state['input']['wikicompare_update_compared'] == 'update' && variable_get('wikicompare_update_compared', 'no-update') == 'no-update') {
    wikicompare_flush_caches();
  }

  //Allow others modules to modify the action when we submit the settings page
  foreach (module_implements('wikicompare_submit_settings_page') as $module) {
    $function = $module . '_wikicompare_submit_settings_page';
    $function($form, $form_state);
  }

}

/**
 * Implements hook_menu().
 * This function create new menu in Drupal
 */
function wikicompare_menu() {

  $items = array();

  //Enable module settings page
  $items['admin/config/wikicompare'] = array(
    'title' => 'Wikicompare module settings',
    'description' => 'Wikicompare module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wikicompare_admin'),
    'access arguments' => array('administer wikicompare'),
    'type' => MENU_NORMAL_ITEM,
   );

  //Enable comparative table URL
  $items['compare'] = array(
    'title' => 'Comparative Table',
    'description' => 'Comparative Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wikicompare_comparative_table'),
    'access callback' => TRUE,
    'menu_name' => 'main-menu',
    'weight' => 0,
    'file' => 'wikicompare_comparative_table.inc',
  );


  $items['admin/config/wikicompare'] = array(
    'title' => 'Administration',
    'description' => 'Wikicompare Administration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wikicompare_admin'),
    'access arguments' => array('administer wikicompare'),
    'menu_name' => 'main-menu',
    'weight' => 10,
  ); 


  $items['get_item_list_children_callback'] = array(
    'page callback' => 'get_item_list_children_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['get_feature_callback'] = array(
    'page callback' => 'get_feature_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['toogle_compared_checkbox_callback'] = array(
    'page callback' => 'toggle_compared_checkbox_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  $items['get_dialog_callback/%/%/%/%/%/%'] = array(
    'page callback' => 'get_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(1,2,3,4,5,6),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
  );

  $items['select_dialog_callback'] = array(
    'page callback' => 'select_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['submit_dialog_callback'] = array(
    'page callback' => 'submit_dialog_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['compute_comparative_table_callback'] = array(
    'page callback' => 'compute_comparative_table_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

  $items['make_cleaning_callback'] = array(
    'page callback' => 'make_cleaning_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table.inc',
    'delivery callback' => 'ajax_deliver',
  );

/*
  $items['toogle_fastedit_callback'] = array(
    'page callback' => 'toggle_fastedit_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table_fastedit.inc',
    'delivery callback' => 'ajax_deliver',
  );
*/
  $items['get_fastedit_form_callback'] = array(
    'page callback' => 'get_fastedit_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table_fastedit.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  $items['submit_fastedit_form_callback'] = array(
    'page callback' => 'submit_fastedit_form_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'file' => 'wikicompare_comparative_table_fastedit.inc',
    'delivery callback' => 'ajax_deliver',
  );
  
  return $items;
}

function wikicompare_permission() {
  return array(
    'administer wikicompare' => array(
      'title' => t('Administer Wikicompare'),
      'restrict access' => TRUE,
    ),
  );
}


function wikicompare_block_info_alter(&$blocks, $theme, $code_blocks) {


  $blocks['system']['navigation']['region'] = -1;
  $blocks['system']['management']['region'] = -1;

}


function wikicompare_library() {
  $path = drupal_get_path('module', 'wikicompare');

  $libraries['wikicompare_comparative_table'] = array(
    'title' => 'Wikicompare Table',
    'version' => '1.0',
    'js' => array(
       $path . "/js/wikicompare_comparative_table.js" => array(),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_node_info().
 * This function create the new node type we need for the module
 */
function wikicompare_node_info() {
  return array(
    'feature' => array(
      'name' => t('Feature'),
      'base' => 'feature',
      'description' => t('TODO : Feature description'),
      'help' => t('TODO : Features submission guidelines'),
      'title_label' => t('Title'),
    ),

    'compared' => array(
      'name' => t('Compared'),
      'base' => 'compared',
      'description' => t('TODO'),
      'help' => t('TODO'),
      'title_label' => t('Title'),
    ),

    'implementation' => array(
      'name' => t('Implementation'),
      'base' => 'implementation',
      'description' => t('TODO'),
      'help' => t('TODO'),
      'title_label' => t('Title'),
    ),


  );
}


/**
 * Implements hook_form().
 * We need it to display the title in the node form
 */
function feature_form($node, $form_state) {
  return node_content_form($node, $form_state);
}


function compared_form($node, $form_state) {
  return node_content_form($node, $form_state);
}




function wikicompare_form_compared_node_form_alter(&$form, &$form_state, $form_id) {

  wikicompare_build_form('form', $form, $form_state);

}

function wikicompare_form_feature_node_form_alter(&$form, &$form_state, $form_id) {

  wikicompare_build_form('form', $form, $form_state);

}

function wikicompare_form_implementation_node_form_alter(&$form, &$form_state, $form_id) {

  wikicompare_build_form('form', $form, $form_state);

}

function wikicompare_build_form($form_type, &$form=NULL, &$form_state=NULL, &$output=NULL, $nid=NULL, $type=NULL, $fastaction=NULL, $node=NULL, $readonly=NULL, $tnode=NULL, $readonly_translation=NULL) {



  if ($form_type == 'form') {

    $node = new stdClass;
    $nid = 0;
    if (isset($form_state['node'])) {
      $node = $form_state['node'];
      if (isset($node->nid)) {
        $nid = $node->nid;
      }

    }

    //$form['#attached']['js'][] = '/misc/ajax.js';
    //$form['#attached']['js'][] = '/misc/progress.js';
    $form['#attached']['js'][] = drupal_get_path('module', 'wikicompare') . '/js/wikicompare_comparative_table.js';

    $settings = array(
      'wikicompare' => array(
        'fastedit_status' => 0,
      )
    );
/*
    foreach (module_implements('wikicompare_build_form_settings') as $module) {
      $function = $module . '_wikicompare_build_form_settings';
      $function($settings, $node, $nid, $form, $form_state);
    }
*/
    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_build_form_settings($settings, $node, $nid, $form, $form_state);
    }


    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => $settings,
    );
  }


  if ($node->type != 'implementation') {

    if ($form_type == 'fastedit') { 
      $name_field = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#required' => TRUE,
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_title_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_title'),
        )
      );          
      if ($fastaction == 'edit') {
        $name_field['#value'] = $node->title;
      }
      $name_field_clone = $name_field;
      if ($readonly == True) {
        $name_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($name_field);
/*
      foreach (module_implements('wikicompare_fastedit_add_element') as $module) {
        $function = $module . '_wikicompare_fastedit_add_element';
        $function($output, $tnode, $name_field_clone, 'title', $readonly_translation, $fastaction);
      }
*/
      if (module_exists('wikicompare_translation')) {
        wikicompare_translation_wikicompare_fastedit_add_element($output, $tnode, $name_field_clone, 'title', $readonly_translation, $fastaction);
      }

    }

    if ($form_type == 'form') {
      $title = 'No parent';
      if (isset($node->wikicompare_parent_id['und'])) {
        $parent_nid = $node->wikicompare_parent_id['und'][0]['target_id'];
        $res = get_recursive_data($node->type, array($parent_nid));
        $title = $res['data'][$parent_nid]['data']->fulltitle;
      }

      $select_parent_link = array(
        'text' => 'Select parent',
        'title' => 'Select parent',
        'selector' => 'dialog-content',
        'path' => 'get_dialog_callback/select_simple_dialog/' . $node->type . '/form_selected_parent/' . $nid . '/wikicompare-parent-id/parent_id',
      );
      $clear_parent_link = l('Clear', '/',  array('attributes' => array('class' => array('clear_link'), 'type' => $node->type)));
      $form['container_selected_parent'] = array(
        'title' => array('#markup' => $title),
        '#type' => 'container',
        '#id' => 'form_selected_parent',
        '#weight' => -3,
        '#suffix' => '<p>' . theme('simple_dialog_link', $select_parent_link) . ' ' . $clear_parent_link . '</p>'
  
      );
      //hide($form['wikicompare_parent_id']);
    }

    if ($form_type == 'fastedit') {

      if ($fastaction == 'edit') {

        $parent_id = 0;
        $parent_name = 'No parent';
        if (isset($node->wikicompare_parent_id['und'])) {
          $parent_id = $node->wikicompare_parent_id['und'][0]['target_id'];
          $res = get_recursive_data($type, array($parent_id));
          $parent_name = $res['data'][$parent_id]['data']->fulltitle;
        }

        //Allow others modules to modify the output
        foreach (module_implements('wikicompare_comparative_table_fastedit_parent') as $module) {
          $function = $module . '_wikicompare_comparative_table_fastedit_parent';
          $function($parent_id, $type, $node);
        }


        //TODO We need to remove the keyword context in simple_dialog.js to make this link work.
        //Add the link to open the select feature popup
        $select_parent_link = array(
          'text' => 'Select parent',
          'title' => 'Select parent',
          'selector' => 'dialog-content',
          'path' => 'get_dialog_callback/select_simple_dialog/' . $type . '/form_selected_parent/' . $nid . '/wikicompare-parent-id/parent_id',
        );
        $clear_parent_link = l('Clear', '/',  array('attributes' => array('class' => array('clear_link'))));
        $output .= '<p><span id="form_selected_parent">' . $parent_name . '</span>';
        if ($readonly != True) {
          $output .= '<span id="parent_id" style="display:none;">' . $parent_id . '</span> ' . theme('simple_dialog_link', $select_parent_link) . ' ' . $clear_parent_link . '</p>';
        }

      }


      
      $sequence_field = array(
        '#type' => 'textfield',
        '#title' => t('Sequence'),
        '#value' => 1,
        '#required' => TRUE,
        '#element_validate' => array('element_validate_integer'),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_sequence_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_sequence'),
        )
      );
      if ($fastaction == 'edit') {
        $sequence_field['#value'] = $node->wikicompare_sequence['und'][0]['value'];
      }
      if ($readonly == True) {
        $sequence_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($sequence_field);

    }


    if (module_exists('wikicompare_inherit_compared')) {
      wikicompare_inherit_compared_modify_form_no_implementation($form, $output, $form_type, $node);
    }


/* TODO Not working, textarea work but not text_format.
    if ($form_type == 'fastedit') {
      $description_field = array(
        '#type' => 'text_format',
        '#title' => t('Description'),
        '#format' => 'wikicompare_text_format',
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_description_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_description'),
        )
      );

      if ($fastaction == 'edit') {
        $description_field['#value'] = $node->body['und'][0]['value'];
      } 
      $description_field_clone = $description_field;
      if ($readonly == True) {
        $description_field['#attributes']['disabled'] = True;
      }
      dpm(render($description_field), 'description');

    

      if (module_exists('wikicompare_translation')) {
        wikicompare_translation_wikicompare_fastedit_add_element($output, $tnode, $name_field_clone, 'body', $readonly_translation, $fastaction);
      }

    }
*/

    if ($form_type == 'form') {
      $form['wikicompare_user_ids']['#weight'] = 10;


      if (wikicompare_revisioning_access_node('', 'publish revisions', $node) == False) {
        //Hide the field in the form. We can't unset it, otherwise it display an error.
        hide($form['wikicompare_user_ids']);
        //We unset the field in form_state by security, so even if a user display the field with firebug and change value, the value will not be updated.
        unset($form_state['node']->wikicompare_user_ids);
      }

      //Hide the field in the form. We can't unset it, otherwise it display an error.
      hide($form['wikicompare_user_from_parent_ids']);
      //We empty the field because only the published revision need to have the values. No security problem here since only the published revision is used, so no need to update form_state.
      $form['wikicompare_user_from_parent_ids']['und'][0]['target_id'] = NULL;
    }

  } else {

    $query = db_select('cache_implementation', 'n');
    $query->addField('f', 'title', 'feature');
    $query->addField('c', 'title', 'compared');
    $query->addField('f', 'has_children', 'feature_has_children');
    $query->addField('c', 'has_children', 'compared_has_children');
    $query->addField('ngf', 'wikicompare_guidelines_value', 'guidelines'); 
    $query->leftjoin('cache_feature', 'f', 'n.feature_id = f.nid');
    $query->leftjoin('cache_compared', 'c', 'n.compared_id = c.nid');
    $query->leftjoin('field_revision_wikicompare_guidelines', 'ngf', 'f.vid = ngf.revision_id');
    $query->condition('n.nid', $nid);
    $result = $query->execute();
    foreach ($result as $record) {
      $res = $record;
    }

    if ($form_type == 'form') {


      $form['wikicompare_guidelines'] = array(
        '#markup' => $record->guidelines,
        '#weight' => -2,
      );

      $form['wikicompare_feature_id'] = array('#markup' => $res->feature);
      $form['wikicompare_compared_id'] = array('#markup' => $res->compared);

      if (!$res->feature_has_children && !$res->compared_has_children) {
        if (wikicompare_revisioning_access_node('', 'publish revisions', $node) == False) {
          //Hide the field in the form. We can't unset it, otherwise it display an error.
          hide($form['wikicompare_protected']);
          //We unset the field in form_state by security, so even if a user display the field with firebug and change value, the value will not be updated.
          unset($form_state['node']->wikicompare_protected);
        }
      } else {
          //Hide the field in the form. We can't unset it, otherwise it display an error.
          hide($form['wikicompare_support']);
          //We unset the field in form_state by security, so even if a user display the field with firebug and change value, the value will not be updated.
          unset($form_state['node']->wikicompare_support);

          //Hide the field in the form. We can't unset it, otherwise it display an error.
          hide($form['wikicompare_protected']);
          //We unset the field in form_state by security, so even if a user display the field with firebug and change value, the value will not be updated.
          unset($form_state['node']->wikicompare_protected);

          //Hide the field in the form. We can't unset it, otherwise it display an error.
          hide($form['wikicompare_proofs']);
          //We unset the field in form_state by security, so even if a user display the field with firebug and change value, the value will not be updated.
          unset($form_state['node']->wikicompare_proofs);
      }

      if (module_exists('wikicompare_inherit_compared')) {
        wikicompare_inherit_compared_modify_form_implementation($form, $output, $readonly, $test, 'form', $node, $fastaction);
      }

    }



    if ($form_type == 'fastedit') {

      if (!$res->feature_has_children && !$res->compared_has_children) {

        $test = FALSE;
        if (module_exists('wikicompare_inherit_compared')) {
          wikicompare_inherit_compared_modify_form_implementation($form, $output, $readonly, $test, 'fastedit', $node, $fastaction);
        }

        //I wasn't able to use the renderable array, so I coded directly in html
        $output .= '<input class="form_implementation_fastedit_support form-checkbox" type="checkbox" id="edit-wikicompare-support-und"';

        if ($fastaction == 'edit') {

          if ($node->wikicompare_support['und'][0]['value'] == 1) {
            $test_support = TRUE;
          }

          if (module_exists('wikicompare_inherit_compared')) {
            wikicompare_inherit_compared_test_form_implementation($test_support, $test, $node);
          }
          if ($test_support == TRUE) {
            $output .= ' checked="checked"';
          }
        }

        if ($readonly == TRUE) {
          $output .= ' disabled="disabled"';
        }

        $output .= ' value="1" />  <label class="option" for="form_implementation_fastedit_support_' . $node->nid . '">Support? </label>';
      }
/*
      $support_field = array(
        '#type' => 'select',
        '#title' => t('Support'),
        '#required' => TRUE,
        '#options' => array(
          0 => 'Unsupported',
          1 => 'Supported',
        ),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_support_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_support'),
        )
      );
      if ($fastaction == 'edit') {
        $support_field['#value'] = $node->wikicompare_support['und'][0]['value'];
      }
      if ($readonly == True) {
        $support_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($support_field);
*/
    }

  }


  if ($form_type == 'fastedit') {
    if ($type == 'feature') {
      $type_field = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#required' => TRUE,
        '#options' => array(
          'parent-weighted-average' => 'Parent Feature - Weighted Average',
          'parent-highest-percentage' => 'Parent Feature - Highest Percentage',
        ),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_type_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_type'),
        )
      );
      if ($fastaction == 'edit') {
        $type_field['#value'] = $node->wikicompare_type['und'][0]['value'];
      }
      if ($readonly == True) {
        $type_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($type_field);
      
/* TODO Not working, textarea work but not text_format.
      $guidelines_field = array(
        '#type' => 'textarea',
        '#title' => t('Validation guidelines'),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_guidelines_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_guidelines'),
        )
      );
      if ($fastaction == 'edit') {
        $guidelines_field['#value'] = $node->wikicompare_guidelines['und'][0]['value'];
      }
      $guidelines_field_clone = $guidelines_field;
      if ($readonly == True) {
        $guidelines_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($guidelines_field);

      if (module_exists('wikicompare_translation')) {
        wikicompare_translation_wikicompare_fastedit_add_element($output, $tnode, $name_field_clone, 'wikicompare_guidelines', $readonly_translation, $fastaction);
      }

*/

      $weight_default = 1;
      if ($nid != 0 && $fastaction != 'edit') {

        $query = db_select('cache_feature', 'n');
        $query->addField('n', 'nid', 'nid');
        $query->addField('n', 'type', 'type');
        $query->condition('n.nid', $nid);
        $result = $query->execute();
        foreach ($result as $record) {

          if ($record->type == 'parent-highest-percentage') {
            $weight_default = 100;
          }
        }
      }
      
      $weight_field = array(
        '#type' => 'textfield',
        '#title' => t('Weight'),
        '#required' => TRUE,
        '#value' => $weight_default,
        '#element_validate' => array('element_validate_integer_positive_or_null'),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_weight_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_weight'),
        )
      );
      if ($fastaction == 'edit') {
        $weight_field['#value'] = $node->wikicompare_weight['und'][0]['value'];
      }
      if ($readonly == True) {
        $weight_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($weight_field);
      

    }
  }


  if ($node->type != 'implementation') {
    if ($form_type == 'form') {
      $current_state = 'new';  
      if (isset($form['wikicompare_state']['und']['#default_value'][0])) {
        $current_state = $form['wikicompare_state']['und']['#default_value'][0];
      }
      $form['wikicompare_state']['und']['#options'] = wikicompare_state_get_options($nid, $current_state);
    }

    if ($form_type == 'fastedit') {
      $state_field = array(
        '#type' => 'select',
        '#title' => t('State'),
        '#required' => TRUE,
        '#options' => wikicompare_state_get_options($nid, 'new'),
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_state_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_state'),
        )
      );
      if ($fastaction == 'edit') {
        $state_field['#value'] = $node->wikicompare_state['und'][0]['value'];
        $state_field['#options'] = wikicompare_state_get_options($nid, $state_field['#value']);
      }
      if ($readonly == True) {
        $state_field['#attributes']['disabled'] = True;
      }
      $output .= drupal_render($state_field);
    }

  }

  if ($form_type == 'form') {
/*
    foreach (module_implements('wikicompare_build_form_after') as $module) {
      $function = $module . '_wikicompare_build_form_after';
      $function($form, $form_state, $node);
    }*/

    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_build_form_after($form, $form_state, $node);
    }

  }

  if ($form_type == 'fastedit') {
    //Allow others modules to modify the output
    foreach (module_implements('wikicompare_comparative_table_fastedit_specific') as $module) {
      $function = $module . '_wikicompare_comparative_table_fastedit_specific';
      $function($output, $type, $node, $fastaction, $nid);
    }
    
    $revision_field = array(
      '#type' => 'textarea',
      '#title' => t('Revision log message'),
      '#id' => 'form_' . $type . '_fast' . $fastaction . '_revision_' . $nid,
      '#attributes' => array(
        'class' => array('form_' . $type . '_fast' . $fastaction . '_revision'),
      )
    );
    $output .= drupal_render($revision_field);

    //Allow others modules to modify the output
/*
    foreach (module_implements('wikicompare_fastedit_specific_after') as $module) {
      $function = $module . '_wikicompare_fastedit_specific_after';
      $function($output, $type, $node, $fastaction, $nid, $readonly, $readonly_translation);
    }
*/
    if (module_exists('wikicompare_translation')) {
      wikicompare_translation_wikicompare_fastedit_specific_after($output, $type, $node, $fastaction, $nid, $readonly, $readonly_translation);
    }

  }
}





function wikicompare_state_get_options($nid, $current_state) {

  $user = $GLOBALS['user'];

  $label_options = unserialize(WIKICOMPARE_STATE_OPTIONS);  

  $has_right = False;
  if (wikicompare_test_access_node('test', $nid, $user->uid)  || user_access('administer users', $user) || $user->uid == 1) {
    $has_right = True;
  }

  $options = array();

  if ($current_state == 'new') {
    $options['new'] = $label_options['new'];
  }

  if ((in_array($current_state, array('incomplete', 'submitted', 'disactivated')) || $has_right)) {
    $options['incomplete'] = $label_options['incomplete'];
  }

  if ((in_array($current_state, array('new', 'incomplete', 'submitted', 'disactivated')) || $has_right)) {
    $options['submitted'] = $label_options['submitted'];
  }

  if ((in_array($current_state, array('published-incomplete', 'published-submitted', 'published')) || $has_right)) {
    $options['published-incomplete'] = $label_options['published-incomplete'];
  }


  if ((in_array($current_state, array( 'published-incomplete', 'published-submitted', 'published')) || $has_right)) {
    $options['published-submitted'] = $label_options['published-submitted'];
  }

  if ((in_array($current_state, array('published-incomplete', 'published-submitted', 'published')) || $has_right)) {
    $options['published'] = $label_options['published'];
  }

  if ($has_right) {
    $options['rejected'] = $label_options['rejected'];
  }

  $options['disactivated'] = $label_options['disactivated'];

  return $options;


}


/**
 * Implements hook_theme().
 */
function wikicompare_theme() {
  return array(
    // Theme function for the compare table
    'wikicompare_comparative_table' => array(
      'render element' => 'form',
      'file' => 'wikicompare_comparative_table.inc',
    ),
  );
}

/**
 * Implements hook_revisioning_access_node().
 * Check _revisioning_access_node_revision and revisioning_user_node_access in revisioning.module for more information
 * We need to add :
 * $tests = module_invoke_all('revisioning_access_node', $node_op, $revision_op, $node);
 * foreach ($tests as $test) {
 *   if ($test == False) {
 *     $node_op = False;
 *   }
 * }
 * after
 * $node_op = revisioning_user_node_access($revision_op, $node);
 * in revisioning.module. Make some lobbying to integrate this hook in revisioning module.
 *
 * It would be better to implement this hook in revisioning_user_node_access, but this function is poorly designed. It return during the whole function, we suggest to move only one return at the end and insert the hook just before.
 * Since auto-publish use directly revisioning_user_node_access, we can't alter his result. Therefore, we can't use the auto-publish feature for now because since everyone has the publish revision right, everyone will auto-publish even those who are not power users.
 */ 
function wikicompare_revisioning_access_node($node_op, $revision_op, $node) {


  if ($revision_op == 'publish revisions') {

    $uid = $GLOBALS['user']->uid;

    $test = False;
    if (isset($node->nid)) { //Manage case when we create the node
      $test = wikicompare_test_access_node('test', $node->nid, $uid);
    }

    if (($test == False) && ($uid != 1)) {
      return False;
    } else {
      return True;
    }

  }



}

function wikicompare_test_access_node($action, $nid, $uid=NULL) {

    $test = False;
    $users = array();

    if ($nid == NULL) {
      return False;
    }


    $query = db_select('node', 'n');
    $query->addField('f', 'wikicompare_user_from_parent_ids_target_id', 'uid');
    $query->join('field_revision_wikicompare_user_from_parent_ids', 'f', 'n.vid = f.revision_id');
    $query->condition('n.nid', $nid);
    if ($action == 'test') {
      $query->condition('f.wikicompare_user_from_parent_ids_target_id', $uid);
    }
    $result = $query->execute();
    foreach ($result as $record) {
      if ($action == 'test') {
        $test = True;
      } else {
          $users[$record->uid] = array(
            'entity_type' => 'node',
            'bundle' => '',
            'deleted' => 0,
            'entity_id' => 0,
            'revision_id' => 0,
            'language' => 'und',
            'delta' => 0,
            'wikicompare_user_from_parent_ids_target_id' => $record->uid,
          );
      }
    }


    $query = db_select('node', 'n');
    $query->addField('f', 'wikicompare_user_ids_target_id', 'uid');
    $query->join('field_revision_wikicompare_user_ids', 'f', 'n.vid = f.revision_id');
    $query->condition('n.nid', $nid);
    if ($action == 'test') {
      $query->condition('f.wikicompare_user_ids_target_id', $uid);
    }
    $result = $query->execute();
    foreach ($result as $record) {
      if ($action == 'test') {
        $test = True;
      } else {
          $users[$record->uid] = array(
            'entity_type' => 'node',
            'bundle' => '',
            'deleted' => 0,
            'entity_id' => 0,
            'revision_id' => 0,
            'language' => 'und',
            'delta' => 0,
            'wikicompare_user_from_parent_ids_target_id' => $record->uid,
          );
      }
    }

    if ($action == 'test') {
      return $test;
    } else {
      return $users;
    }

}



?>
