<?php

/**
 * @file
 * Define the function for export and generate demo data.
 */


//Include import files.
require_once drupal_get_path('module', 'wikicompare_generate_demo') . '/data/erp_data.inc';



/**
 * Implements hook_menu().
 * Add a new page where we can export the wikicompare.
 */
function wikicompare_generate_demo_menu() {

  $items = array();
  $items['admin/config/wikicompare/export'] = array(
    'title' => 'Export Wikicompare',
    'description' => 'Export Wikicompare',
    'page callback' => 'wikicompare_export_page',
    'access callback' => TRUE,
  );

  return $items;

}

/**
 * Render the export page.
 */
function wikicompare_export_page() {

  //First we flush the caches to be sure the data are up to date.
  wikicompare_refresh_caches();

  $output = "<p>WARNING : Export must always be done when english is the main language of your website. Also, do not use special characters in your translations, including accents.</p>";

  //We stop the percentage computation on the new wikicompare, to import the data faster.
  $output .= "<p>wikicompare_stop_computation();</p>";

  //Get language list on the new wikicompare, to know if we can install the translation or not.
  $output .= "<p>\$language_list = array();<br/>";
  $output .= "foreach (language_list() as \$key => \$lang) {<br/>";
  $output .= "\$language_list[\$key] = \$key;<br/>";
  $output .= "}</p>";

  $settings = wikicompare_initialize_settings(array('states' => array('draft', 'closed')));

  if (module_exists('wikicompare_translation')) {
    $translations = array();
    //Get all infofields translations
    wikicompare_translation_demo_export_infofield_request($translations);
  }

  //Get the infofields definition.
  $settings['infofields'] = array();
  $query = db_select('wikicompare_infofields', 'f');
  $query->addField('f', 'name', 'name');
  $query->addField('f', 'title', 'title');
  $query->addField('f', 'type', 'type');
  $query->addField('f', 'allowed_values', 'allowed_values');
  $query->addField('f', 'sequence', 'sequence');
  $query->addField('f', 'is_required', 'is_required');
  $query->addField('f', 'is_active', 'is_active');
  $query->addField('f', 'is_home', 'is_home');
  $query->addField('f', 'is_filter', 'is_filter');
  $query->addField('f', 'filter_type', 'filter_type');
  $query->addField('f', 'category', 'category');
  $query->addField('f', 'category_sequence', 'category_sequence');
  $result = $query->execute();
  foreach ($result as $record) {
    $output .= "<p>\$settings = array();<br/>";
    $output .= "\$settings['context'] = 'add';<br/>";
    $output .= "\$settings['name'] = '" . $record->name . "';<br/>";
    $output .= "\$settings['title'] = '" . $record->title . "';<br/>";
    $output .= "\$settings['type'] = '" . $record->type . "';<br/>";
    $output .= '$settings["allowed_values"] = "' . str_replace("\n", "\\n", $record->allowed_values) . '";<br/>'; //We need to escape the carriage return and use the " to identify it.
    $output .= "\$settings['sequence'] = '" . $record->sequence . "';<br/>";
    $output .= "\$settings['is_required'] = '" . $record->is_required . "';<br/>";
    $output .= "\$settings['is_active'] = '" . $record->is_active . "';<br/>";
    $output .= "\$settings['is_home'] = '" . $record->is_home . "';<br/>";
    $output .= "\$settings['is_filter'] = '" . $record->is_filter . "';<br/>";
    $output .= "\$settings['filter_type'] = '" . $record->filter_type . "';<br/>";
    $output .= "\$settings['category'] = '" . $record->category . "';<br/>";
    $output .= "\$settings['category_sequence'] = '" . $record->category_sequence . "';<br/>";
    $output .= "wikicompare_admin_infofield_modify(\$settings);</p>";

    if (module_exists('wikicompare_translation')) {
      //Export infofield translations.
      wikicompare_translation_demo_export_infofield_after($output, $translations, $record);
    }

    //Get the infofields in settings, to prepare the product request.
    $settings['infofields'][] = array(
      'name' => $record->name,
      'title' => $record->title,
      'category' => $record->category
    );
  }

  $output .= "<p>\$products = array();</p>";
  //Find all the product on the first level of the tree.
  $products = request_db('product', array('parent_id' => NULL, 'dont_translate' => True, 'get_infofields' => 1), $settings);
  foreach ($products as $product) {
    //Get product children.
    wikicompare_generate_demo_export_output_node($output, $product, 'product', $settings);
  }

  $output .= "<p>\$criterions = array();</p>";
  //Find all the criterions on the first level of the tree.
  $criterions = request_db('criterion', array('parent_id' => NULL, 'dont_translate' => True), $settings);
  foreach ($criterions as $criterion) {
    //Get criterion children.
    wikicompare_generate_demo_export_output_node($output, $criterion, 'criterion', $settings);
  }

  if (module_exists('wikicompare_profiles')) {
    //Export profiles.
    wikicompare_profiles_demo_export($output, $settings);
  }

  if (module_exists('wikicompare_inherit_product')) {
    //Export inherit product.
    wikicompare_inherit_product_demo_export($output);
  }

  //Get all evaluations.
  $query = db_select('wikicompare_cache_evaluation', 'n');
  $query->addField('c', 'nid', 'cid');
  $query->addField('f', 'nid', 'fid');
  $query->addField('n', 'support', 'support');
  $query->leftjoin('wikicompare_cache_product', 'c', 'n.product_id = c.nid');
  $query->leftjoin('wikicompare_cache_criterion', 'f', 'n.criterion_id = f.nid');
  $query->condition("c.has_children", 0);
  $query->condition("f.has_children", 0);
  $query->condition("n.support", 1);
  if (module_exists('wikicompare_inherit_product')) {
    //Add inherit product specific fields.
    wikicompare_inherit_product_demo_export_evaluation_request($query);
  }
  $result = $query->execute();

  foreach ($result as $record) {

    $output .= "<p>";
    //The evaluation is created by the wikicompare module, so we have to load it to modify his fields.
    $output .= "\$evaluation_id = wikicompare_get_evaluation_id(\$products['new-" . $record->cid . "'], \$criterions['new-" . $record->fid . "']);<br/>";
    $output .= "\$node = node_load(\$evaluation_id);<br/>";
    $output .= "\$node->wikicompare_support['und'][0]['value'] = " . $record->support . ";<br/>";
    if (module_exists('wikicompare_inherit_product')) {
      //Add inherit product specific fields.
      wikicompare_inherit_product_demo_export_evaluation_render($output, $record);
    }
    $output .= "\$node->revision = TRUE;<br/>";
    $output .= "\$node->revision_moderation = TRUE;<br/>";
    $output .= "node_save(\$node);<br/>";
    $output .= "_revisioning_publish_latest_revision(\$node);<br/>";
    $output .= "</p>";

  }

  //We restart the percentage computation on the new wikicompare.
  $output .= "<p>wikicompare_start_computation();</p>";

  return $output;

}



/**
 * Type-agnostic and recursive function to export item.
 *
 * @param $output
 *   The code html of the export. Passed by reference.
 *
 * @param $node
 *   The node we want to export.
 *
 * @param $type
 *   The type of the node.
 */
function wikicompare_generate_demo_export_output_node(&$output, $node, $type, $settings) {

  //Generate code to import node.
  $output .= "<p>";
  $output .= "\$node = new stdClass();<br/>";
  $output .= "\$node->type = '" . $type . "';<br/>";
  $output .= "\$node->language = 'en';<br/>";
  foreach (unserialize(WIKICOMPARE_FIELDS)[$type] as $field) {
    if (!in_array($field['name'], array('nid', 'vid', 'has_children')) && ($node['data']->$field['name'] != NULL)) {
      $output .= '$node->';
      if ($field['db_key']) {
        $output .= 'wikicompare_';
      }
      $output .= $field['name'];
      if ($field['db_key']) {
        $output .= "['und'][0]['" . $field['type'] . "']";
      }
      $output .= ' = ';
      if ($field['type'] == 'target_id') {
        $output .= "\$". $type . "s['new-" . $node['data']->$field['name'] . "']";
      } else {
        $output .= '"' . $node['data']->$field['name'] . '"';
      }
      $output .= ';<br/>';
      if ($field['type'] == 'target_id') {
        $output .= "\$node->wikicompare_" . $field['name'] . "['und'][0]['target_type'] = 'node';<br/>";
      }
    }
  }

  if ($type == 'product') {
    //Export infofield value for the product.
    foreach ($settings['infofields'] as $infofield) {
      $field = 'wikicf_' . $infofield['name'];
      if ($node['data']->$field) {
        $output .= "\$node->wikicf_" . $infofield['name'] . "['und'][0]['value'] = '" . $node['data']->$field . "';<br/>";
      }
    }
  }

  if (module_exists('wikicompare_profiles')) {
    //Export profile specific fields.
    wikicompare_profiles_demo_export_specific_fields($output, $type, $node);
  }

  $output .= "\$node->status = 1;<br/>";
  $output .= "\$node->promote = 0;<br/>";
  $output .= "\$node->sticky = 0;<br/>";
  $output .= "\$node->comment = 2;<br/>";
  //Save the node.
  $output .= "node_save(\$node);<br/>";
  $output .= "_revisioning_publish_latest_revision(\$node);<br/>";
  //We keep the id in an array for later use.
  $output .= "\$". $type . "s['new-" . $node['data']->nid . "'] = \$node->nid;<br/>";

  $output .= "</p>";

  if (module_exists('wikicompare_translation')) {
    //Export translations of a node.
    wikicompare_translation_demo_export_translations($output, $node, $type);
  }

  //Export children.
  if ($node['data']->has_children) {
    $children = request_db($type, array('parent_id' => array($node['data']->nid), 'dont_translate' => True, 'get_infofields' => 1), $settings);
    foreach ($children as $child) {
      wikicompare_generate_demo_export_output_node($output, $child, $type, $settings);
    }
  }

}



/**
 * Function which add the generate demo specific field in wikicompare administration.
 *
 * @param $form
 *   The form we need to update. Passed by reference.
 */
function wikicompare_generate_demo_settings_page(&$form) {

  //All generate demo related fields are in a fieldset.
  $form['demo_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Generate Demo'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  //To generate criterions.
  $form['demo_fieldset']['criterion_min_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum criterion depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => True,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_max_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum criterion depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_child_min_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum number of child criterion per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_child_max_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of child criterion per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_min_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum criterion weight'),
    '#default_value' => 1,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_max_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum criterion weight'),
    '#default_value' => 3,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['criterion_highest_chance'] = array(
    '#type' => 'textfield',
    '#title' => t('Chance that the criterion is of highest type instead of weighted average (1/x)'),
    '#default_value' => 5,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  //To generate product.
  $form['demo_fieldset']['product_min_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum product depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['product_max_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum product depth'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['product_child_min_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum number of child product per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  $form['demo_fieldset']['product_child_max_per_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of child product per level'),
    '#default_value' => 0,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  if (module_exists('wikicompare_profiles')) {
    //Display profile specific fields in the generate demo form.
    wikicompare_profiles_demo_form($form);
  }

  $form['demo_fieldset']['evaluation_support_chance'] = array(
    '#type' => 'textfield',
    '#title' => t('Chance that the created evaluation go to supported state (1/x)'),
    '#default_value' => 20,
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive_or_null'),
  );

  if (module_exists('wikicompare_inherit_product')) {
    //Display inherit product specific field in the generate demo form.
    wikicompare_inherit_product_demo_form($form) ;
  }

  if (module_exists('wikicompare_translation')) {
    //Display translation specific fields in the generate demo form.
    wikicompare_translation_demo_form($form);
  }

  //Import predefined data.
  $form['demo_fieldset']['generate_erp_data'] = array(
    '#type' => 'submit',
    '#prefix' => '<br/>',
    '#suffix' => '<br/>You can use this button to generate predefine data on the ERP theme.',
    '#value' => t('Generate ERP data'),
    '#button_type' => 'button',
    '#submit' => array('wikicompare_generate_erp_data'),
  );

  //Drop all datas.
  $form['demo_fieldset']['drop_nodes'] = array(
    '#type' => 'submit',
    '#prefix' => '<br/>',
    '#suffix' => '<br/>You can use this button to drop all data in the website.',
    '#value' => t('Drop nodes'),
    '#button_type' => 'button',
    '#submit' => array('wikicompare_drop_nodes'),
  );

  //Access to the export page.
  $form['demo_fieldset']['export_link'] = array(
    '#type' => 'link',
    '#prefix' => '<br/><br/>',
    '#title' => 'Export data',
    '#href' => 'admin/config/wikicompare/export',
  );
}



/**
 * Function to validate fields values.
 */
function element_validate_integer_positive_or_null($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}



/**
 * Function which generate demo data when we submit the wikicompare administration page.
 */
function wikicompare_generate_demo_submit_settings_page($form, $form_state) {

  //We stop the percentage computation to create them faster.
  wikicompare_stop_computation();

  $criterions_created = array();
  $products_created = array();

  //If we want to generate criterions datas.
  if (($form_state['input']['criterion_min_depth'] != 0) && ($form_state['input']['criterion_max_depth'] != 0) && ($form_state['input']['criterion_child_min_per_level'] != 0) && ($form_state['input']['criterion_child_max_per_level'] != 0)) {

    //Get all settings.
    $settings = array(
      'type' => 'criterion',
      'min_depth' => $form_state['input']['criterion_min_depth'],
      'max_depth' => $form_state['input']['criterion_max_depth'],
      'prefix' => 'Criterion ' . variable_get('wikicompare_next_demo_sequence', 1),
      'child_min_per_level' => $form_state['input']['criterion_child_min_per_level'],
      'child_max_per_level' => $form_state['input']['criterion_child_max_per_level'],
      'min_weight' => $form_state['input']['criterion_min_weight'],
      'max_weight' => $form_state['input']['criterion_max_weight'],
      'criterion_highest_chance' => $form_state['input']['criterion_highest_chance'],
      'parent_type' => 'parent-weighted-average',
      'depth' => 1,
    );
    if (module_exists('wikicompare_translation')) {
      //Prepare translation specific settings in the generate demo submit.
      wikicompare_translation_demo_submit_settings($settings, $form_state);
    }

    //Generate data.
    wikicompare_generate_demo_create_children($settings, $criterions_created);

  }

  //If we want to generate products datas.
  if (($form_state['input']['product_min_depth'] != 0) && ($form_state['input']['product_max_depth'] != 0) && ($form_state['input']['product_child_min_per_level'] != 0) && ($form_state['input']['product_child_max_per_level'] != 0)) {

    //Get all settings.
    $settings = array(
      'type' => 'product',
      'min_depth' => $form_state['input']['product_min_depth'],
      'max_depth' => $form_state['input']['product_max_depth'],
      'prefix' => 'Product ' . variable_get('wikicompare_next_demo_sequence', 1),
      'child_min_per_level' => $form_state['input']['product_child_min_per_level'],
      'child_max_per_level' => $form_state['input']['product_child_max_per_level'],
      'depth' => 1,
    );
    if (module_exists('wikicompare_translation')) {
      //Prepare translation specific settings in the generate demo submit.
      wikicompare_translation_demo_submit_settings($settings, $form_state);
    }

    //Generate datas.
    wikicompare_generate_demo_create_children($settings, $products_created);

  }

  if (module_exists('wikicompare_profiles')) {
    //Generate profile demo data.
    wikicompare_profiles_demo_submit_generate($form_state);
  }

  //We use a sequence to make sure we can generate several time the demo data without problem.
  variable_set('wikicompare_next_demo_sequence', variable_get('wikicompare_next_demo_sequence', 1) + 1);

  if (module_exists('wikicompare_inherit_product')) {
    //Generate inherit product demo data.
    wikicompare_inherit_product_demo_submit_generate($form_state, $products_created);
  }

  //Change support evaluation value. This part take a lot of time, better put a high support chance
  if (!empty($products_created) && !empty($criterions_created) && $form_state['input']['evaluation_support_chance'] != 0) {

    //Get all evaluation node.
    $query = db_select('wikicompare_cache_evaluation', 'i');
    $query->addField('i', 'nid', 'nid');
    $query->leftjoin('wikicompare_cache_product', 'c', 'i.product_id = c.nid');
    $query->leftjoin('wikicompare_cache_criterion', 'f', 'i.criterion_id = f.nid');
    $query->condition("c.has_children", 0);
    $query->condition("f.has_children", 0);
    $query->condition('i.criterion_id', $criterions_created, 'in');
    $query->condition('i.product_id', $products_created, 'in');
    if (module_exists('wikicompare_inherit_product')) {
      //Add inherit product specific field.
      wikicompare_inherit_product_demo_submit_evaluation_query($query);
    }
    $result = $query->execute();
    foreach($result as $record) {
      $node = node_load($record->nid);
      $modified = False;
      //Modify support field.
      if (rand(1, $form_state['input']['evaluation_support_chance']) == $form_state['input']['evaluation_support_chance']) {
        $node->wikicompare_support['und'][0]['value'] = 1;
        $modified = True;
      }
      if (module_exists('wikicompare_inherit_product')) {
        //Modify inherit product specific field.
        wikicompare_inherit_product_demo_submit_evaluation($node, $modified, $form_state, $record);
      }

      if ($modified == True) {
        $node->status = 1;
        $node->promote = 0;
        $node->sticky = 0;
        $node->revision = TRUE;
        $node->revision_moderation = TRUE;
        node_save($node);
        _revisioning_publish_latest_revision($node);
      }
    }

  }

  //We restart the percent computation.
  wikicompare_start_computation();

}


/**
 * Recursive function which create node.
 *
 * @param $settings
 *
 * @param $nodes_created
 *   The created nodes, we need them for later used. Passed by reference.
 */
function wikicompare_generate_demo_create_children($settings, &$nodes_created) {

  $settings_for_children = $settings;
  //Get the number of children.
  $nb_child = rand($settings['child_min_per_level'], $settings['child_max_per_level']);

  $i = 1;
  while ($i <= $nb_child) {
    $node = new stdClass();
    $node->type = $settings['type'];
    $node->language = language_default('language');
    $settings_for_children['prefix'] = $settings['prefix'] . '.' . $i;
    $node->title = $settings_for_children['prefix'];
    $node->wikicompare_sequence['und'][0]['value'] = $i;
    $node->wikicompare_state['und'][0]['value'] = 'published';
    if (isset($settings['parent_id'])) {
      $node->wikicompare_parent_id['und'][0]['target_id'] = $settings['parent_id'];
      $node->wikicompare_parent_id['und'][0]['target_type'] = "node";
    }
    if ($settings['type'] == 'product') {
      $node->wikicompare_short_description['und'][0]['value'] = "This is a short description";
      $node->wikicompare_comparable['und'][0]['value'] = "only-without-children";
    }
    if ($settings['type'] == 'criterion') {
      //Define random weight in taking account of the parent type and the settings.
      if ($settings['parent_type'] == 'parent-weighted-average') {
        $node->wikicompare_weight['und'][0]['value'] = rand($settings['min_weight'], $settings['max_weight']);
      } elseif ($settings['parent_type'] == 'parent-highest-percentage') {
        $node->wikicompare_weight['und'][0]['value'] = 100/rand($settings['min_weight'], $settings['max_weight']);
      }
      //Define random type.
      if (rand(1, $settings['criterion_highest_chance']) != $settings['criterion_highest_chance']) {
        $node->wikicompare_type['und'][0]['value'] = 'parent-weighted-average';
        $settings_for_children['parent_type'] = 'parent-weighted-average';
      } else {
        $node->wikicompare_type['und'][0]['value'] = 'parent-highest-percentage';
        $settings_for_children['parent_type'] = 'parent-highest-percentage';
      }
    }
    if (module_exists('wikicompare_profiles')) {
      if ($settings['type'] == 'profile') {
        $node->wikicompare_criterions['und'] = array();
      }
    }
    $node->promote = 0;
    $node->sticky = 0;
    //Activate comments.
    $node->comment = 2;
    //Create new node.
    node_save($node);
    $nodes_created[$node->nid] = $node->nid;

    if (module_exists('wikicompare_translation')) {
      //Generate demo translations.
      wikicompare_translation_demo_submit_generate($node, $settings, $i);
    }

    //Randomly generate children.
    if ((($settings['depth'] < $settings['min_depth'] or (rand($settings['depth'], $settings['max_depth']) != $settings['depth'])) and ($settings['depth'] < $settings['max_depth']))) {
      $settings_for_children['depth'] = $settings['depth'] + 1;
      $settings_for_children['parent_id'] = $node->nid;
      wikicompare_generate_demo_create_children($settings_for_children, $nodes_created);
    } else {
      if (module_exists('wikicompare_profiles')) {
        //Generate profile specific fields. We generate theses fields only for profile without children.
        wikicompare_profiles_demo_submit_specific_fields($node, $settings);
      }
    }

    $i++;

  }

}




/**
 * Function called in wikicompare administration to drop all node in wikicompare.
 */
function wikicompare_drop_nodes() {

  wikicompare_stop_computation();

  $query = db_select('node', 'n');
  $query->addField('n', 'nid', 'nid');
  $result = $query->execute();

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);

  //Delete infofields.
  $query = db_select('wikicompare_infofields', 'f');
  $query->addField('f', 'name', 'name');
  $result = $query->execute();
  foreach ($result as $record) {
    //Delete the field.
    field_delete_field('wikicf_' . $record->name);
  }

  //Delete in wikicompare table.
  db_delete('wikicompare_infofields')
    ->execute();

  if (module_exists('wikicompare_translation')) {
    //Drop infofield translations.
    wikicompare_translation_demo_drop_infofield_translations();
  }

  wikicompare_start_computation();

}

?>
