<?php


function wikicompare_translation_wikicompare_build_form_settings(&$settings, &$node, &$nid, $form, $form_state) {

  dpm($form, 'form');
  if ($form_state['node']->language != language_default('language')) {
    

    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->condition('n.tnid', $form_state['node']->tnid);
    $query->condition('n.language', language_default('language'));
    $result = $query->execute();
    foreach ($result as $record) {
      $node = node_load($record->nid);
      $nid = $node->nid;
    }
  }
/*
  if (isset($form['tnid'])) {
    $node = node_load($form['tnid']['#value']);
    $nid = $node->nid;
  } elseif (isset($form['translation_source'])) {
    $node = $form['translation_source']['#value'];
    $nid = $node->nid;
  }*/

}

function wikicompare_translation_wikicompare_build_form_after(&$form, &$form_state, $node) {



  if ($form['nid']['#value'] == NULL && !isset($form['translation_source'])) {
    $form['language']['#default_value'] = language_default('language');

  }

  hide($form['language']);
dpm($form, 'form_after');
  if ($form_state['node']->language != language_default('language')) {
//  if (isset($form['translation_source']) || (isset($form['tnid']) && ($form['tnid'] != $form['nid']))) {
    if (isset($form['wikicompare_parent_id'])) {
      $form['container_selected_parent'] = $form['container_selected_parent']['title'];
      unset($form['wikicompare_parent_id']);
      unset($form_state['node']->wikicompare_parent_id);
    }

    if (isset($form['wikicompare_type'])) {
      $form['wikicompare_type'] = array('#markup' => $node->wikicompare_type['und'][0]['value']);
      unset($form_state['node']->wikicompare_type);
    }
//TODO Weight est quand même mis dans la traduction
    if (isset($form['wikicompare_weight'])) {
      $form['wikicompare_weight'] = array('#markup' => $node->wikicompare_weight['und'][0]['value']);
      unset($form_state['node']->wikicompare_weight);
/*      $form['wikicompare_weight']['und'][0]['value']['#required'] = FALSE;
      $form['wikicompare_weight']['und']['#required'] = FALSE;
      $form['wikicompare_weight']['und'][0]['value']['#default_value'] = NULL;*/

    }

    if (isset($form['wikicompare_state'])) {
      $form['wikicompare_state'] = array('#markup' => $node->wikicompare_state['und'][0]['value']);
      unset($form_state['node']->wikicompare_state);
    }

    if (isset($form['wikicompare_feature_id'])) {
      unset($form_state['node']->wikicompare_feature_id);
    }

    if (isset($form['wikicompare_compared_id'])) {
      unset($form_state['node']->wikicompare_compared_id);
    }

//TODO pareil que weight
    if (isset($form['wikicompare_support'])) {
      $form['wikicompare_support'] = array('#markup' => $node->wikicompare_support['und'][0]['value']);
      unset($form_state['node']->wikicompare_support);
    }

    foreach (module_implements('wikicompare_translation_form') as $module) {
      $function = $module . '_wikicompare_translation_form';
      $function($form, $form_state, $node);
    }

  }
dpm($form_state['node'], 'node after');
dpm($form, 'form_after');

}


//TODO security pour weight mais marche pas
function wikicompare_translation_node_presave($node) {
  if ($node->language != language_default('language')) {
    if (isset($node->wikicompare_weight)) {
      unset($node->wikicompare_weight);
    }
  }
}

function wikicompare_translation_wikicompare_delete_after($node) {

dpm($node, 'test');

  if ($node->language == language_default('language') && $node->tnid != 0) {
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->condition('n.tnid', $node->tnid);
    $result = $query->execute();
    foreach ($result as $record) {
      if ($node->nid != $record->nid) {
dpm($record);
        node_delete($record->nid);
      }
    }
  }

}


function wikicompare_translation_wikicompare_settings_change_language_request(&$query, $new_key) {

  $query->addField('t', 'nid', 'new_nid');
  $query->addField('t', 'vid', 'new_vid');
  $query->leftjoin('node', 't', 'n.tnid = t.tnid');
  $query->condition('t.language', $new_key);

}

function wikicompare_translation_wikicompare_settings_change_language(&$old_ids, $res) {
/*
  $new_ids = array();
  foreach ($res as $id) {
    $new_ids[$id->new_id] = $id->new_id;
  }
*/

  foreach ($res as $ids) {

    if ($ids->new_nid) {
      wikicompare_move_field_language('wikicompare_parent_id', $ids);
      wikicompare_move_field_language('wikicompare_type', $ids);
      wikicompare_move_field_language('wikicompare_weight', $ids);
      wikicompare_move_field_language('wikicompare_state', $ids);
      wikicompare_move_field_language('wikicompare_feature_id', $ids);
      wikicompare_move_field_language('wikicompare_compared_id', $ids);
      wikicompare_move_field_language('wikicompare_support', $ids);
      //We mark the new node as the referent node by changing the tnid on all related node
      db_update('node')
        ->fields(array(
          'tnid' => $ids->new_nid,
        ))
        ->condition('tnid', $ids->nid)
        ->execute();
      //In this case, we must not update the flag of the old node
      unset($old_ids[$ids->nid]);
    }
  }
}

function wikicompare_move_field_language($field_name, $ids) {


  $field = array();
  $query = db_select('field_data_' . $field_name, 'n');
  $query->fields('n');
  $query->condition('n.entity_id', $ids->nid);
  $result = $query->execute();
  foreach ($result as $record) {
    $field = $record;
  }

dpm($field_name);
dpm($field);

  if (!empty($field)) {

    //By security, we remove all revision field on new language, except the one in history
    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->condition('revision_id', $ids->new_vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->execute();

    $header = array();
    $data = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
      if ($key == 'entity_id') {
        $data[] = $ids->new_nid;
      } elseif ($key == 'revision_id') {
        $data[] = $ids->new_vid;
      } else {
        $data[] = $value;
      }
    }
    $query = db_insert('field_data_' . $field_name)->fields($header);
    $query->values($data);
    $query->execute();


    //We create one revision with the content of the field for each revision on the new node
    $new_revisions = array();
    $query = db_select('node_revision', 'n');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.nid', $ids->new_nid);
    $query->condition('n.vid', $ids->new_vid, '>=');
    $result = $query->execute();
    foreach ($result as $record) {
      $new_revisions[$record->vid] = $record->vid;
    }

    //Note that we take the value on the published revision. All data on revision not yet approved will be lost.
    $field = array();
    $query = db_select('field_revision_' . $field_name, 'n');
    $query->fields('n');
    $query->condition('n.entity_id', $ids->nid);
    $query->condition('n.revision_id', $ids->vid);
    $result = $query->execute();
    foreach ($result as $record) {
      $field = $record;
    }

    $header = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
    }
    $lines = array();
    foreach ($new_revisions as $vid) {
      $data = array();
      foreach ($field as $key => $value) {
        if ($key == 'entity_id') {
          $data[] = $ids->new_nid;
        } elseif ($key == 'revision_id') {
          $data[] = $vid;
        } else {
          $data[] = $value;
        }
      }
      $lines[] = $data;
    }
    $query = db_insert('field_revision_' . $field_name)->fields($header);
    foreach ($lines as $record) {
      $query->values($record);
    }
    $query->execute();


    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->condition('revision_id', $ids->vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->execute();



  } 

}

?>
