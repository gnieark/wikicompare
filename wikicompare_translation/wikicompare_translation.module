<?php


//TODO Not working. Maybe we'll not debug it but just wait for the template which will incluse the language switcher anyway.
function wikicompare_translation_block_info_alter(&$blocks, $theme, $code_blocks) {

  $blocks['locale']['language']['region'] = 'content';
  $blocks['locale']['language']['weight'] = 10;

 
}

function wikicompare_translation_build_form_settings(&$settings, &$node, &$nid, $form, $form_state) {

  
  if ($form_state['node']->language != language_default('language')) {
    
    $tnid = 0;
    if (isset($form_state['node']->tnid)) {
      $tnid = $form_state['node']->tnid;
    } else {
      $tnid = $form_state['node']->translation_source->nid;
    }

    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->condition('n.tnid', $tnid);
    $query->condition('n.language', language_default('language'));
    $result = $query->execute();
    foreach ($result as $record) {
      $node = node_load($record->nid);
      $nid = $node->nid;
    }
  }


}

function wikicompare_translation_build_form_after(&$form, &$form_state, $node) {



  if ($form['nid']['#value'] == NULL && !isset($form['translation_source'])) {
    $form['language']['#default_value'] = language_default('language');

  }

  hide($form['language']);

  if ($form_state['node']->language != language_default('language')) {
//  if (isset($form['translation_source']) || (isset($form['tnid']) && ($form['tnid'] != $form['nid']))) {
    if (isset($form['wikicompare_parent_id'])) {
      $form['container_selected_parent'] = $form['container_selected_parent']['title'];
      unset($form['wikicompare_parent_id']);
      unset($form_state['node']->wikicompare_parent_id);
    }

    if (isset($form['wikicompare_sequence'])) {
      $form['wikicompare_sequence'] = array('#markup' => $node->wikicompare_sequence['und'][0]['value']);
      unset($form_state['node']->wikicompare_sequence);
    }

    if (isset($form['wikicompare_type'])) {
      $form['wikicompare_type'] = array('#markup' => $node->wikicompare_type['und'][0]['value']);
      unset($form_state['node']->wikicompare_type);
    }
//TODO Weight est quand même mis dans la traduction
    if (isset($form['wikicompare_weight'])) {
      $form['wikicompare_weight'] = array('#markup' => $node->wikicompare_weight['und'][0]['value']);
      unset($form_state['node']->wikicompare_weight);
/*      $form['wikicompare_weight']['und'][0]['value']['#required'] = FALSE;
      $form['wikicompare_weight']['und']['#required'] = FALSE;
      $form['wikicompare_weight']['und'][0]['value']['#default_value'] = NULL;*/

    }

    if (isset($form['wikicompare_state'])) {
      $form['wikicompare_state'] = array('#markup' => $node->wikicompare_state['und'][0]['value']);
      unset($form_state['node']->wikicompare_state);
    }

    if (isset($form['wikicompare_feature_id'])) {
      unset($form_state['node']->wikicompare_feature_id);
    }

    if (isset($form['wikicompare_compared_id'])) {
      unset($form_state['node']->wikicompare_compared_id);
    }

//TODO pareil que weight
    if (isset($form['wikicompare_support'])) {
      $form['wikicompare_support'] = array('#markup' => $node->wikicompare_support['und'][0]['value']);
      unset($form_state['node']->wikicompare_support);
    }


    if (isset($form['wikicompare_compared_id'])) {
      unset($form_state['node']->wikicompare_compared_id);
    }

    if (isset($form['wikicompare_user_ids'])) {
      hide($form['wikicompare_user_ids']);
      unset($form_state['node']->wikicompare_user_ids);
    }


    if (module_exists('wikicompare_needs')) {
      wikicompare_needs_wikicompare_translation_form($form, $form_state, $node);
    }

    if (module_exists('wikicompare_inherit_compared')) {
      wikicompare_inherit_compared_wikicompare_translation_form($form, $form_state, $node);
    }

  }


}


function wikicompare_translation_wikicompare_request_db(&$query, $type, $db_settings, $settings) {


  global $language;



  if (!isset($db_settings['dont_translate'])) {
    $query->addField('t', 'nid', 'nid_translated');
    $query->addField('t', 'title', 'title_translated');
    $query->addField('t', 'language', 'tlanguage');
    $query->leftjoin('node', 't', 'n.nid = t.tnid');
    $query->where("t.language = '" . $language->language . "' OR t.language = '" . language_default('language') . "' OR t.language IS NULL");

    if ($settings['fastaction']) {

      $query->addField('tr', 'uid', 'tuid');
      $query->leftjoin('node_revision', 'tr', 't.nid = tr.nid');
    }

  }

}

function wikicompare_translation_wikicompare_request_db_fastaction(&$node_array, $record, $type, $nids, $db_settings) {

  global $language;

  if (!isset($db_settings['dont_translate'])) {
    if ($GLOBALS['user']->uid != $record->tuid && $record->tuid != NULL && $record->tlanguage == $language->language) {
//      if ($type != 'implementation' || isset($settings['nids'])) {
//      if (!$settings['is_implementation_without_nids']) {
       $node_array['no-edit-translate'] = True;
/*      } else {
        $res[$record->feature_id][$record->compared_id]['no-edit-translate'] = True;
      }*/
    }
  }

}

function wikicompare_translation_wikicompare_request_db_build(&$node_array, $record) {

  global $language;

  if (isset($record->title_translated)) {
    if ($record->title_translated != NULL && $record->tlanguage == $language->language) {
      $node_array['data']->tnid = $record->nid_translated;
      $node_array['data']->title = $record->title_translated;
    }
  }


}

function wikicompare_translation_wikicompare_fastaction_items_test(&$test, $node_array) {

  global $language;

  if (($language->language != language_default('language')) && ($node_array['data']->nid != 0)) {

    $test_translate = False;
    if (isset($node_array['no-edit-translate'])) {
      $test_translate = True;
    }

    if ($test && $test_translate) {
      $test = True;
    } else {
      $test = False;
    }

  }

}

function wikicompare_translation_wikicompare_fastaction_get_tnode(&$tnode, &$readonly_translation, $node) {


  global $language;

  if ($language->language != language_default('language')) {
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->addField('r', 'uid', 'uid');
    $query->leftjoin('node_revision', 'r', 'n.nid = r.nid');
    $query->condition('n.tnid', $node->nid);
    $query->condition('n.language', $language->language);
    $result = $query->execute();
    foreach ($result as $record) {
      $tnode = node_load($record->nid);
      if ($GLOBALS['user']->uid != $record->uid) {
        $readonly_translation = True;
      }
    }

    //If the translation node wasn't already created
    if (!isset($tnode->nid)) {
      $tnode = new stdClass;
      $tnode->title = '';


    }

  }
  
}

function wikicompare_translation_wikicompare_fastaction_add_element(&$output, $tnode, $field, $name, $readonly_translation, $fastaction) {



  global $language;
  if ($language->language != language_default('language')) {

    if ($fastaction == 'edit') {
      $field['#title'] .= ' translated';
      $field['#id'] .= '_translation';
      $field['#attributes']['class'][] = 'translation';

      $value = $tnode->$name;
      if ($name != 'title') {
        $value = $value['und'][0]['value'];
      }
      $field['#value'] = $value;
      if ($readonly_translation == True) {
        $field['#attributes']['disabled'] = True;
      }
      $output .= render($field);
    }

  }

}

function wikicompare_translation_wikicompare_fastaction_specific_after(&$output, $type, $node, $fastaction, $nid, $readonly, $readonly_translation) {

  global $language;
  if ($language->language != language_default('language')) {
    if ($fastaction == 'edit') {
      $selectnode_field = array(
        '#type' => 'select',
        '#title' => t('Node to update'),
        '#options' => array(
          0 => 'Update main node',
          1 => 'Update translation node',
        ),
        '#value' => 0,
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_selectnode_' . $nid,
        '#attributes' => array(
          'class' => array('form_' . $type . '_fast' . $fastaction . '_selectnode'),
        )
      );
      if ($readonly == True) {
        $selectnode_field['#value'] = 1;
        $selectnode_field['#attributes']['disabled'] = True;
      }
      if ($readonly_translation == True) {
        $selectnode_field['#attributes']['disabled'] = True;
      }
      $output .= render($selectnode_field);
    }

  }

}

function wikicompare_translation_wikicompare_fastaction_submit_init_tnode(&$tnode, $_POST, $fastaction) {

  global $language;

  if ($language->language != language_default('language')) {
    $tnode->type = $_POST['type'];
    $tnode->uid = $GLOBALS['user']->uid;
    $tnode->language = $language->language;
    $tnode->translation_source = node_load($_POST['node_id']);

    if ($fastaction == 'edit') {

      $query = db_select('node', 'n');
      $query->addField('n', 'nid', 'nid');
      $query->condition('n.tnid', $_POST['node_id']);
      $query->condition('n.language', $language->language);
      $result = $query->execute();

      foreach ($result as $record) {

        $tnode = node_load($record->nid);
        $tnode->revision = 1;
      }
    }
  }
}

function wikicompare_translation_wikicompare_fastaction_submit_element(&$tnode, $_POST, $field_name, $jscript_name, $fastaction) {

  if ($fastaction == 'edit') {
    global $language;

    if ($language->language != language_default('language')) {
      $value = $_POST[$jscript_name . '_translation'];
      if ($field_name != 'title') {
        $temp = $value;
        $value = array();
        $value['und'][0]['value'] = $temp;
        $value['und'][0]['format'] = 'full_html';
      }
    
      $tnode->$field_name = $value;
    }
  }

}

function wikicompare_translation_wikicompare_fastaction_submit_after(&$node, $tnode, $_POST, $fastaction) {

  if ($fastaction == 'edit') {
    global $language;

    if ($language->language != language_default('language')) {
      if ($_POST['selectnode']) {
        $node = $tnode;
      }
    }
  }

}

function wikicompare_translation_wikicompare_delete_after($node) {



  if ($node->language == language_default('language') && $node->tnid != 0) {
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->condition('n.tnid', $node->tnid);
    $result = $query->execute();
    foreach ($result as $record) {
      if ($node->nid != $record->nid) {

        node_delete($record->nid);
      }
    }
  }

}


function wikicompare_translation_wikicompare_settings_change_language_request(&$query, $new_key) {

  $query->addField('t', 'nid', 'new_nid');
  $query->addField('t', 'vid', 'new_vid');
  $query->leftjoin('node', 't', 'n.tnid = t.tnid');
  $query->condition('t.language', $new_key);

}

function wikicompare_translation_wikicompare_settings_change_language(&$old_ids, $res) {


  foreach ($res as $ids) {

    if ($ids->new_nid) {
      wikicompare_move_field_language('wikicompare_parent_id', $ids);
      wikicompare_move_field_language('wikicompare_type', $ids);
      wikicompare_move_field_language('wikicompare_weight', $ids);
      wikicompare_move_field_language('wikicompare_state', $ids);
      wikicompare_move_field_language('wikicompare_feature_id', $ids);
      wikicompare_move_field_language('wikicompare_compared_id', $ids);
      wikicompare_move_field_language('wikicompare_support', $ids);
      //We mark the new node as the referent node by changing the tnid on all related node
      db_update('node')
        ->fields(array(
          'tnid' => $ids->new_nid,
        ))
        ->condition('tnid', $ids->nid)
        ->execute();
      //In this case, we must not update the flag of the old node
      unset($old_ids[$ids->nid]);
    }
  }
}

function wikicompare_move_field_language($field_name, $ids) {


  $field = array();
  $query = db_select('field_data_' . $field_name, 'n');
  $query->fields('n');
  $query->condition('n.entity_id', $ids->nid);
  $result = $query->execute();
  foreach ($result as $record) {
    $field = $record;
  }



  if (!empty($field)) {

    //By security, we remove all revision field on new language, except the one in history
    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->condition('revision_id', $ids->new_vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->execute();

    $header = array();
    $data = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
      if ($key == 'entity_id') {
        $data[] = $ids->new_nid;
      } elseif ($key == 'revision_id') {
        $data[] = $ids->new_vid;
      } else {
        $data[] = $value;
      }
    }
    $query = db_insert('field_data_' . $field_name)->fields($header);
    $query->values($data);
    $query->execute();


    //We create one revision with the content of the field for each revision on the new node
    $new_revisions = array();
    $query = db_select('node_revision', 'n');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.nid', $ids->new_nid);
    $query->condition('n.vid', $ids->new_vid, '>=');
    $result = $query->execute();
    foreach ($result as $record) {
      $new_revisions[$record->vid] = $record->vid;
    }

    //Note that we take the value on the published revision. All data on revision not yet approved will be lost.
    $field = array();
    $query = db_select('field_revision_' . $field_name, 'n');
    $query->fields('n');
    $query->condition('n.entity_id', $ids->nid);
    $query->condition('n.revision_id', $ids->vid);
    $result = $query->execute();
    foreach ($result as $record) {
      $field = $record;
    }

    $header = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
    }
    $lines = array();
    foreach ($new_revisions as $vid) {
      $data = array();
      foreach ($field as $key => $value) {
        if ($key == 'entity_id') {
          $data[] = $ids->new_nid;
        } elseif ($key == 'revision_id') {
          $data[] = $vid;
        } else {
          $data[] = $value;
        }
      }
      $lines[] = $data;
    }
    $query = db_insert('field_revision_' . $field_name)->fields($header);
    foreach ($lines as $record) {
      $query->values($record);
    }
    $query->execute();


    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->condition('revision_id', $ids->vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->execute();



  } 

}

?>
