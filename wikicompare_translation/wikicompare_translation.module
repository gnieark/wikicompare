<?php


//TODO Not working. Maybe we'll not debug it but just wait for the template which will incluse the language switcher anyway.
function wikicompare_translation_block_info_alter(&$blocks, $theme, $code_blocks) {

  $blocks['locale']['language']['region'] = 'content';
  $blocks['locale']['language']['weight'] = 10;

 
}


/*****************************************************************
*
*    FORM
*
*****************************************************************/

/**
 * Get the main language node if we are consulting a translation node.
 * 
 * @param $node
 *   The object containing the main language node. Passed by reference
 *
 * @param $nid
 *   The nid of the main language node. Passed by reference.
 *
 * @param $form_state
 *   Array containing the detail of the node we are consulting.
 */
function wikicompare_translation_build_form_settings(&$node, &$nid, $form_state) {

  //If we are consulting a node which is not in the main language.
  if ($form_state['node']->language != language_default('language')) {
    
    //Then the tnid is in common on all the translation of the main content. We can have it on tnid or translation_source field.
    $tnid = 0;
    if (isset($form_state['node']->tnid)) {
      $tnid = $form_state['node']->tnid;
    } elseif (isset($form_state['node']->translation_source)) {
      $tnid = $form_state['node']->translation_source->nid;
    }

    //Then the node with same tnid and language equal to main language is the main node, we add his nid and object as variable.
    if ($tnid != 0) {
      $query = db_select('node', 'n');
      $query->addField('n', 'nid', 'nid');
      $query->condition('n.tnid', $tnid);
      $query->condition('n.language', language_default('language'));
      $result = $query->execute();
      foreach ($result as $record) {
        $node = node_load($record->nid);
        $nid = $node->nid;
      }
    }

  }

}



/**
 * Add an item coming from the translated node in the form.
 * 
 * @param $output
 *   The HTML code which will be inserted. Passed by reference
 *
 * @param $tnode
 *   The object containing the translated node.
 *
 * @param $field
 *   Array containing the detail of the field we want to render.
 *
 * @param $name
 *   The title of the field
 *
 * @param $readonly_translation
 *   Flag indicated if the user can modify the translation node.
 *
 * @param $fastaction
 *   The mode of the fastaction.
 */
function wikicompare_translation_fastaction_add_element(&$output, $tnode, $field, $name, $readonly_translation, $fastaction) {

  global $language;
  //We will display the field in the language of the user, so if he is in the main language we will not add another field.
  if ($language->language != language_default('language')) {

    //We can't create a node translation of the main language node isn't created yet.
    if ($fastaction == 'edit') {
      //Add a suffix to recognize the translation field.
      $field['#title'] .= ' translated';
      $field['#id'] .= '_translation';
      $field['#attributes']['class'][] = 'translation';

      //Get the value from db. Title is directly in the object but for the other fields we need to search in ['und'][0]['value'].
      $value = $tnode->$name;
      if ($name != 'title') {
        $value = $value['und'][0]['value'];
      }
      $field['#value'] = $value;
      //If the user do not have rights, then the field become read-only.
      if ($readonly_translation == True) {
        $field['#attributes']['disabled'] = True;
      }
      //Render the HTML code.
      $output .= render($field);
    }

  }

}



/**
 * Remove importants fields in form if we are in translation node.
 *
 * @param $form
 *   The form array which will be used by Drupal to build the node form. Passed by reference.
 *
 * @param $form_state
 *   Array containing in-depth information of the node and form settings. Passed by reference.
 *
 * @param $node
 *   Object containing the detail of the node.
 */
function wikicompare_translation_build_form_after(&$form, &$form_state, $node) {

  //When we create a new translation node, we need to set the language to the current language of the user.
  if ($form['nid']['#value'] == NULL && !isset($form['translation_source'])) {
    $form['language']['#default_value'] = language_default('language');
  }

  //Field which allow to select the language. Filled automatically and hidden.
  hide($form['language']);

  //If we are in a translation node, we hide the importants fields.
  if ($form_state['node']->language != language_default('language')) {

    if (isset($form['wikicompare_parent_id'])) {
      //Just display the value of the field.
      $form['container_selected_parent'] = $form['container_selected_parent']['title'];
      //Remove the field from the form.
      unset($form['wikicompare_parent_id']);
      //Make sure the user can modify the value by hacking the HTML with firebug.
      unset($form_state['node']->wikicompare_parent_id);
    }

    if (isset($form['wikicompare_sequence'])) {
      $form['wikicompare_sequence'] = array('#markup' => $node->wikicompare_sequence['und'][0]['value']);
      unset($form_state['node']->wikicompare_sequence);
    }

    if (isset($form['wikicompare_type'])) {
      $form['wikicompare_type'] = array('#markup' => $node->wikicompare_type['und'][0]['value']);
      unset($form_state['node']->wikicompare_type);
    }

    //TODO Weight is still put in the translation node, without reason.
    if (isset($form['wikicompare_weight'])) {
      $form['wikicompare_weight'] = array('#markup' => $node->wikicompare_weight['und'][0]['value']);
      unset($form_state['node']->wikicompare_weight);
    }

    if (isset($form['wikicompare_state'])) {
      $form['wikicompare_state'] = array('#markup' => $node->wikicompare_state['und'][0]['value']);
      unset($form_state['node']->wikicompare_state);
    }

    if (isset($form['wikicompare_feature_id'])) {
      unset($form_state['node']->wikicompare_feature_id);
    }

    if (isset($form['wikicompare_compared_id'])) {
      unset($form_state['node']->wikicompare_compared_id);
    }

    //TODO Same than weight. Some others fields are concerned.
    if (isset($form['wikicompare_support'])) {
      $form['wikicompare_support'] = array('#markup' => $node->wikicompare_support['und'][0]['value']);
      unset($form_state['node']->wikicompare_support);
    }

    if (isset($form['wikicompare_compared_id'])) {
      unset($form_state['node']->wikicompare_compared_id);
    }

    if (isset($form['wikicompare_user_ids'])) {
      hide($form['wikicompare_user_ids']);
      unset($form_state['node']->wikicompare_user_ids);
    }

    if (module_exists('wikicompare_needs')) {
      //Remove important need fields from translated node.
      wikicompare_needs_wikicompare_translation_form($form, $form_state, $node);
    }

    if (module_exists('wikicompare_inherit_compared')) {
      //Remove important inherit compared fields from translated node.
      wikicompare_inherit_compared_wikicompare_translation_form($form, $form_state, $node);
    }

  }


}



/**
 * Add the selected field which will allow to select the node which will be submited, main language node or translation.
 * 
 * @param $output
 *   The HTML code which will be inserted in the comparative table to display the fastaction form. Passed by reference.
 *
 * @param $type
 *   The type of the consulted node.
 *
 * @param $node
 *   Object containing the detail of the node.
 *
 * @param $fastaction
 *   The fastaction (add or edit)
 *
 * @param $nid
 *   The nid of the consulted node.
 *
 * @param $readonly
 *   Flag defining if the user should be able to modify the main node in fastaction.
 *
 * @param $readonly_translation
 *   Flag defining if the user should be able to modify the translation node in fastaction.
 */
function wikicompare_translation_fastaction_specific_after(&$output, $type, $node, $fastaction, $nid, $readonly, $readonly_translation) {

  global $language;
  //If the language of the user is different of the main language. Otherwise, we would only have access to the main language node.
  if ($language->language != language_default('language')) {
    if ($fastaction == 'edit') {
      $selectnode_field = array(
        '#type' => 'select',
        '#title' => t('Node to update'),
        '#options' => array(
          0 => 'Update main node',
          1 => 'Update translation node',
        ),
        '#value' => 0,
        '#id' => 'form_' . $type . '_fast' . $fastaction . '_selectnode_' . $nid,
      );
      //If one of the node is readonly, then the other will be selected and the field will be disabled. If both were readonly, then we wouldn't have access to the fastedit link.
      //Translation only.
      if ($readonly == True) {
        $selectnode_field['#value'] = 1;
        $selectnode_field['#attributes']['disabled'] = True;
      }
      //Main language node only.
      if ($readonly_translation == True) {
        $selectnode_field['#attributes']['disabled'] = True;
      }
      //Generate the HTML code.
      $output .= render($selectnode_field);
    }
  }

}



/*****************************************************************
*
*    FASTACTION
*
*****************************************************************/

function wikicompare_translation_fastaction_items_test(&$test, $node_array) {

  global $language;

  if (($language->language != language_default('language')) && ($node_array['data']->nid != 0)) {

    $test_translate = False;
    if (isset($node_array['no-edit-translate'])) {
      $test_translate = True;
    }

    if ($test && $test_translate) {
      $test = True;
    } else {
      $test = False;
    }

  }

}

function wikicompare_translation_fastaction_get_tnode(&$tnode, &$readonly_translation, $node) {


  global $language;

  if ($language->language != language_default('language')) {
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->addField('r', 'uid', 'uid');
    $query->leftjoin('node_revision', 'r', 'n.nid = r.nid');
    $query->condition('n.tnid', $node->nid);
    $query->condition('n.language', $language->language);
    $result = $query->execute();
    foreach ($result as $record) {
      $tnode = node_load($record->nid);
      if ($GLOBALS['user']->uid != $record->uid) {
        $readonly_translation = True;
      }
    }

    //If the translation node wasn't already created
    if (!isset($tnode->nid)) {
      $tnode = new stdClass;
      $tnode->title = '';


    }

  }
  
}


function wikicompare_translation_fastaction_submit_init_tnode(&$tnode, $_POST, $fastaction) {

  global $language;

  if ($language->language != language_default('language')) {
    $tnode->type = $_POST['type'];
    $tnode->uid = $GLOBALS['user']->uid;
    $tnode->language = $language->language;
    $tnode->translation_source = node_load($_POST['node_id']);

    if ($fastaction == 'edit') {

      $query = db_select('node', 'n');
      $query->addField('n', 'nid', 'nid');
      $query->condition('n.tnid', $_POST['node_id']);
      $query->condition('n.language', $language->language);
      $result = $query->execute();

      foreach ($result as $record) {

        $tnode = node_load($record->nid);
        $tnode->revision = 1;
      }
    }
  }
}

function wikicompare_translation_fastaction_submit_element(&$tnode, $_POST, $field_name, $jscript_name, $fastaction) {

  if ($fastaction == 'edit') {
    global $language;

    if ($language->language != language_default('language')) {
      $value = $_POST[$jscript_name . '_translation'];
      if ($field_name != 'title') {
        $temp = $value;
        $value = array();
        $value['und'][0]['value'] = $temp;
        $value['und'][0]['format'] = 'full_html';
      }
    
      $tnode->$field_name = $value;
    }
  }

}

function wikicompare_translation_fastaction_submit_after(&$node, $tnode, $_POST, $fastaction) {

  if ($fastaction == 'edit') {
    global $language;

    if ($language->language != language_default('language')) {
      if ($_POST['selectnode']) {
        $node = $tnode;
      }
    }
  }

}





/*****************************************************************
*
*    NODES
*
*****************************************************************/

/**
 * Remove the translation of the deleted node if the deleted node is the main language node.
 *
 * @param $node
 *   The deleted node.
 */
function wikicompare_translation_delete_after($node) {

  //If the node created is the main language node, and if there is translation of this node.
  if ($node->language == language_default('language') && $node->tnid != 0) {
    //Then we find and remove all the translation of this node.
    $query = db_select('node', 'n');
    $query->addField('n', 'nid', 'nid');
    $query->condition('n.tnid', $node->tnid);
    $result = $query->execute();
    foreach ($result as $record) {
      if ($node->nid != $record->nid) {
        node_delete($record->nid);
      }
    }
  }

}





/*****************************************************************
*
*    CORE_FUNCTIONS
*
*****************************************************************/

/**
 * Add the lines in the database request to recover the translated title, based on the information of the translated nodes.
 *
 * @param $query
 *   The query to update. Passed by reference
 *
 * @param $type
 *   The type of the request.
 *
 * @param db_settings
 *   An associative array containing the specific informations to build the database query.
 * 
 * @param $settings
 *   An associative array containing the informations about the context of the query.
 */
function wikicompare_translation_request_db(&$query, $type, $db_settings, $settings) {

  global $language;

  //Test a flag in db_settings we can use if the translation isn't necessary.
  if (!isset($db_settings['dont_translate'])) {
    $query->addField('t', 'nid', 'nid_translated');
    $query->addField('t', 'title', 'title_translated');
    $query->addField('t', 'language', 'tlanguage');
    $query->leftjoin('node', 't', 'n.nid = t.tnid');
    $query->where("t.language = '" . $language->language . "' OR t.language = '" . language_default('language') . "' OR t.language IS NULL");

    //If we are in fastaction mode, we want to also test is the translation node can be fastedited.
    if ($settings['fastaction']) {
      $query->addField('tr', 'uid', 'tuid');
      $query->leftjoin('node_revision', 'tr', 't.nid = tr.nid');
    }
  }

}



/**
 * Test if the translation node can be fastedit, based on the revisions author.
 *
 * @param $node_array
 *   The node which will be returned. Passed by reference
 *
 * @param $record
 *   The record from the database.
 *
 * $type
 *   The type of the request.
 *
 * @param db_settings
 *   An associative array containing the specific informations to build the database query.
 */
function wikicompare_translation_request_db_fastaction(&$node_array, $record, $type, $db_settings) {

  global $language;

  //Test a flag in db_settings we can use if the translation isn't necessary.
  if (!isset($db_settings['dont_translate'])) {
    //If the user isn't the author of all the revisions of the translation node, then he can't fastedit it.
    if ($GLOBALS['user']->uid != $record->tuid && $record->tuid != NULL && $record->tlanguage == $language->language) {
       $node_array['no-edit-translate'] = True;
    }
  }

}



/**
 * Replace the title from db by the translated title.
 *
 * @param $node_array
 *   The node which will be returned. Passed by reference
 *
 * @param $record
 *   The record from the database.
 */
function wikicompare_translation_request_db_build(&$node_array, $record) {

  global $language;

  //If there is a translation node with a title.
  if (isset($record->title_translated)) {
    if ($record->title_translated != NULL && $record->tlanguage == $language->language) {
      $node_array['data']->tnid = $record->nid_translated;
      $node_array['data']->title = $record->title_translated;
    }
  }

}





function wikicompare_translation_wikicompare_settings_change_language_request(&$query, $new_key) {

  $query->addField('t', 'nid', 'new_nid');
  $query->addField('t', 'vid', 'new_vid');
  $query->leftjoin('node', 't', 'n.tnid = t.tnid');
  $query->condition('t.language', $new_key);

}

function wikicompare_translation_wikicompare_settings_change_language(&$old_ids, $res) {


  foreach ($res as $ids) {

    if ($ids->new_nid) {
      wikicompare_move_field_language('wikicompare_parent_id', $ids);
      wikicompare_move_field_language('wikicompare_type', $ids);
      wikicompare_move_field_language('wikicompare_weight', $ids);
      wikicompare_move_field_language('wikicompare_state', $ids);
      wikicompare_move_field_language('wikicompare_feature_id', $ids);
      wikicompare_move_field_language('wikicompare_compared_id', $ids);
      wikicompare_move_field_language('wikicompare_support', $ids);
      //We mark the new node as the referent node by changing the tnid on all related node
      db_update('node')
        ->fields(array(
          'tnid' => $ids->new_nid,
        ))
        ->condition('tnid', $ids->nid)
        ->execute();
      //In this case, we must not update the flag of the old node
      unset($old_ids[$ids->nid]);
    }
  }
}

function wikicompare_move_field_language($field_name, $ids) {


  $field = array();
  $query = db_select('field_data_' . $field_name, 'n');
  $query->fields('n');
  $query->condition('n.entity_id', $ids->nid);
  $result = $query->execute();
  foreach ($result as $record) {
    $field = $record;
  }



  if (!empty($field)) {

    //By security, we remove all revision field on new language, except the one in history
    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->condition('revision_id', $ids->new_vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->new_nid)
      ->execute();

    $header = array();
    $data = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
      if ($key == 'entity_id') {
        $data[] = $ids->new_nid;
      } elseif ($key == 'revision_id') {
        $data[] = $ids->new_vid;
      } else {
        $data[] = $value;
      }
    }
    $query = db_insert('field_data_' . $field_name)->fields($header);
    $query->values($data);
    $query->execute();


    //We create one revision with the content of the field for each revision on the new node
    $new_revisions = array();
    $query = db_select('node_revision', 'n');
    $query->addField('n', 'vid', 'vid');
    $query->condition('n.nid', $ids->new_nid);
    $query->condition('n.vid', $ids->new_vid, '>=');
    $result = $query->execute();
    foreach ($result as $record) {
      $new_revisions[$record->vid] = $record->vid;
    }

    //Note that we take the value on the published revision. All data on revision not yet approved will be lost.
    $field = array();
    $query = db_select('field_revision_' . $field_name, 'n');
    $query->fields('n');
    $query->condition('n.entity_id', $ids->nid);
    $query->condition('n.revision_id', $ids->vid);
    $result = $query->execute();
    foreach ($result as $record) {
      $field = $record;
    }

    $header = array();
    foreach ($field as $key => $value) {
      $header[] = $key;
    }
    $lines = array();
    foreach ($new_revisions as $vid) {
      $data = array();
      foreach ($field as $key => $value) {
        if ($key == 'entity_id') {
          $data[] = $ids->new_nid;
        } elseif ($key == 'revision_id') {
          $data[] = $vid;
        } else {
          $data[] = $value;
        }
      }
      $lines[] = $data;
    }
    $query = db_insert('field_revision_' . $field_name)->fields($header);
    foreach ($lines as $record) {
      $query->values($record);
    }
    $query->execute();


    db_delete('field_revision_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->condition('revision_id', $ids->vid, '>=')
      ->execute();

    db_delete('field_data_' . $field_name)
      ->condition('entity_id', $ids->nid)
      ->execute();



  } 

}

?>
